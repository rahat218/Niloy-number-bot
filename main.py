import logging
import datetime
import psycopg
import asyncio
import threading
import os
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    JobQueue,
)
from telegram.error import Forbidden, BadRequest

# -----------------------------------------------------------------------------
# |                      тЪая╕П ржЖржкржирж╛рж░ рж╕ржХрж▓ ржЧрзЛржкржи рждржерзНржп ржПржЦрж╛ржирзЗ тЪая╕П                      |
# -----------------------------------------------------------------------------

BOT_TOKEN = "7925556669:AAE5F9zUGOK37niSd0x-YEQX8rn-xGd8Pl8"  # ржкрзНрж░рзЯрзЛржЬржирзЗ ржирждрзБржи ржЯрзЛржХрзЗржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
DATABASE_URL = "postgresql://number_bot_running_user:kpQLHQIuZF68uc7fMlgFiaNoV7JzemyL@dpg-d21qr663jp1c73871p20-a/number_bot_running"
ADMIN_USER_ID = 7052442701
SUPPORT_USERNAME = "@NgRony"

# --- ржмржЯрзЗрж░ рж╕рзЗржЯрж┐ржВрж╕ ---
MAX_STRIKES = 3
BAN_HOURS = 24
COOLDOWN_MINUTES = 2
INACTIVITY_MINUTES = 5

# --- ржмрж╛ржЯржи ржЯрзЗржХрзНрж╕ржЯ ---
GET_NUMBER_TEXT = "тЬи Get Number ЁЯОЧя╕П"
MY_STATS_TEXT = "ЁЯУК My Stats"
SUPPORT_TEXT = "ЁЯУЮ Support"
LANGUAGE_TEXT = "ЁЯМР Language"
ADMIN_PANEL_TEXT = "ЁЯСС Admin Panel ЁЯСС"

# --- ржмрж╣рзБржнрж╛рж╖рж┐ржХ ржЯрзЗржХрзНрж╕ржЯ (ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд) ---
LANG_TEXT = {
    'bn': {
        "welcome": "ЁЯСЛ рж╕рзНржмрж╛ржЧрждржо, {first_name}!\n\nржирж┐ржЪрзЗрж░ ржХрзАржмрзЛрж░рзНржб ржерзЗржХрзЗ ржПржХржЯрж┐ ржЕржкрж╢ржи ржмрзЗржЫрзЗ ржирж┐ржиред",
        "keyboard_hidden": "ржХрзАржмрзЛрж░рзНржб рж▓рзБржХрж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред ржЖржмрж╛рж░ ржжрзЗржЦрждрзЗ /start ржЪрж╛ржкрзБржиред",
        "choose_service": "ЁЯФв ржХрзЛржи рж╕рж╛рж░рзНржнрж┐рж╕рзЗрж░ ржЬржирзНржп ржиржорзНржмрж░ ржкрзНрж░рзЯрзЛржЬржи? ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржмрзЗржЫрзЗ ржирж┐ржи:",
        "stats_header": "ЁЯУК ржЖржкржирж╛рж░ ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи",
        "strikes": "рж╕рзНржЯрзНрж░рж╛ржЗржХ",
        "status_banned": "ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕: {hours} ржШржгрзНржЯрж╛рж░ ржЬржирзНржп ржирж┐рж╖рж┐ржжрзНржзред рж╕ржорж╛ржкрзНрждрж┐рж░ рж╕ржорзЯ: {unban_time}",
        "status_normal": "рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕: рж╕рж╛ржзрж╛рж░ржг ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА",
        "stats_not_found": "ржЖржкржирж╛рж░ ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ /start ржХржорж╛ржирзНржб ржжрж┐ржиред",
        "support_prompt": "ЁЯУЮ ржпрзЗ ржХрзЛржи ржкрзНрж░рзЯрзЛржЬржирзЗ ржЖржорж╛ржжрзЗрж░ рж╕рж╛ржкрзЛрж░рзНржЯ ржЯрж┐ржорзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рждрзЗ ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржиред",
        "support_button": "рж╕рж╛ржкрзЛрж░рзНржЯрзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи",
        "unknown_command": "ЁЯдФ ржжрзБржГржЦрж┐ржд, ржХржорж╛ржирзНржбржЯрж┐ ржмрзБржЭрждрзЗ ржкрж╛рж░рж┐ржирж┐ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржХрзАржмрзЛрж░рзНржбрзЗрж░ ржмрж╛ржЯржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред",
        "choose_language": "ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржкржирж╛рж░ ржнрж╛рж╖рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:",
        "lang_changed": "тЬЕ ржЖржкржирж╛рж░ ржнрж╛рж╖рж╛ рж╕ржлрж▓ржнрж╛ржмрзЗ 'ржмрж╛ржВрж▓рж╛' ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред",
        "searching_number": "ЁЯФН ржЖржкржирж╛рж░ ржЬржирзНржп ржПржХржЯрж┐ {service} ржиржорзНржмрж░ ржЦрзЛржБржЬрж╛ рж╣ржЪрзНржЫрзЗ...",
        "no_number_available": "тЭМ ржжрзБржГржЦрж┐ржд, ржПржЗ ржорзБрж╣рзВрж░рзНрждрзЗ {service} рж╕рж╛рж░рзНржнрж┐рж╕рзЗрж░ ржЬржирзНржп ржХрзЛржирзЛ ржиржорзНржмрж░ ржЦрж╛рж▓рж┐ ржирзЗржЗ! тЭМ\n\nржЕрзНржпрж╛ржбржорж┐ржиржХрзЗ ржмрж┐рж╖рзЯржЯрж┐ ржЬрж╛ржирж╛ржирзЛ рж╣рзЯрзЗржЫрзЗ ржПржмржВ рждрж┐ржирж┐ ржЦрзБржм рж╢рзАржШрзНрж░ржЗ ржирждрзБржи ржиржорзНржмрж░ ржпрзЛржЧ ржХрж░ржмрзЗржиред\n\nтП│ ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржХрж┐ржЫрзБржХрзНрж╖ржг ржкрж░ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
        "number_found": "тЬЕ ржЖржкржирж╛рж░ ржиржорзНржмрж░ржЯрж┐ ржирж┐ржЪрзЗ ржжрзЗржУрзЯрж╛ рж╣рж▓рзЛ:\n\n`{phone_number}`\n\nржПржЗ ржиржорзНржмрж░ржЯрж┐ рзл ржорж┐ржирж┐ржЯрзЗрж░ ржЬржирзНржп ржЖржкржирж╛рж░ред OTP ржкрж╛ржУрзЯрж╛рж░ ржкрж░ ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржиред",
        "otp_received_button": "тЬЕ OTP ржкрзЗрзЯрзЗржЫрж┐",
        "otp_failed_button": "тЭМ OTP ржЖрж╕рзЗржирж┐ (ржирждрзБржи ржиржорзНржмрж░)",
        "report_success": "тЬЕ ржиржорзНржмрж░ржЯрж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ рж░рж┐ржкрзЛрж░рзНржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред ржЖржкржирж╛рж░ ржЬржирзНржп ржирждрзБржи ржиржорзНржмрж░ ржЦрзЛржБржЬрж╛ рж╣ржЪрзНржЫрзЗ...",
        "thank_you_for_otp": "ЁЯОЙ ржзржирзНржпржмрж╛ржж! ржЖржкржирж╛рж░ ржХрж╛ржЬ рж╕ржлрж▓ рж╣рзЯрзЗржЫрзЗред ржЖржкржирж┐ {minutes} ржорж┐ржирж┐ржЯ ржкрж░ ржЖржмрж╛рж░ ржирждрзБржи ржиржорзНржмрж░ ржирж┐рждрзЗ ржкрж╛рж░ржмрзЗржиред",
        "cooldown_message": "тП│ ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи! ржЖржкржирж┐ рж╢рзЗрж╖ржмрж╛рж░ ржиржорзНржмрж░ ржирзЗржУрзЯрж╛рж░ ржкрж░ ржПржЦржирзЛ {minutes} ржорж┐ржирж┐ржЯ ржкрзВрж░рзНржг рж╣рзЯржирж┐ред",
        "strike_warning": "тЪая╕П рж╕рждрж░рзНржХржмрж╛рж░рзНрждрж╛! тЪая╕П\n\nржЖржкржирж┐ ржПржХржЯрж┐ ржиржорзНржмрж░ ржирзЗржУрзЯрж╛рж░ ржкрж░ {minutes} ржорж┐ржирж┐ржЯрзЗрж░ ржоржзрзНржпрзЗ ржХрзЛржирзЛ ржЙрждрзНрждрж░ ржжрзЗржиржирж┐ред ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи рж╕рзНржЯрзНрж░рж╛ржЗржХ: {strikes}/{max_strikes}ред",
        "ban_message": "ЁЯЪл ржЖржкржирж┐ ржирж┐рж╖рж┐ржжрзНржз! ЁЯЪл\n\nржЖржкржирж┐ {max_strikes} ржмрж╛рж░ ржирж┐рзЯржо рж▓ржЩрзНржШржи ржХрж░рж╛рзЯ ржЖржкржирж╛ржХрзЗ рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ржнрж╛ржмрзЗ {hours} ржШржгрзНржЯрж╛рж░ ржЬржирзНржп ржмрзНржпрж╛ржи ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред",
        "unban_message": "ЁЯОЙ ржирж┐рж╖рзЗржзрж╛ржЬрзНржЮрж╛ рждрзБрж▓рзЗ ржирзЗржУрзЯрж╛ рж╣рзЯрзЗржЫрзЗ! ЁЯОЙ\n\nржЖржкржирж╛рж░ рзирзк ржШржгрзНржЯрж╛рж░ ржирж┐рж╖рзЗржзрж╛ржЬрзНржЮрж╛ рж╢рзЗрж╖ рж╣рзЯрзЗржЫрзЗред ржЖржкржирж╛рж░ рж╕рзНржЯрзНрж░рж╛ржЗржХ рж░рж┐рж╕рзЗржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред",
        "admin_panel_prompt": "ЁЯСС ржЕрзНржпрж╛ржбржорж┐ржи ржкрзНржпрж╛ржирзЗрж▓рзЗ рж╕рзНржмрж╛ржЧрждржо ЁЯСС",
        "add_number_prompt": "тЮХ ржиржорзНржмрж░ ржпрзЛржЧ ржХрж░рждрзЗ, ржлрж░ржорзНржпрж╛ржЯ ржЕржирзБрж╕рж░ржг ржХрж░рзБржи:\n`/add <Service> <Number1> <Number2> ...`\nржЙржжрж╛рж╣рж░ржг:\n`/add Facebook 12345 67890`",
        "number_added_success": "тЬЕ рж╕ржлрж▓ржнрж╛ржмрзЗ {count} ржЯрж┐ ржирждрзБржи {service} ржиржорзНржмрж░ ржпрзЛржЧ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред",
        "new_number_broadcast": "ЁЯОЙ **рж╕рзБржЦржмрж░! ржирждрзБржи ржиржорзНржмрж░ ржпрзЛржЧ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ!** ЁЯОЙ\n\nЁЯУЕ рждрж╛рж░рж┐ржЦ: *{date}*\n\nржЕрзНржпрж╛ржбржорж┐ржи ржЖржЬ **{service}** рж╕рж╛рж░рзНржнрж┐рж╕рзЗрж░ ржЬржирзНржп ржирждрзБржи ржиржорзНржмрж░ ржпрзЛржЧ ржХрж░рзЗржЫрзЗржиред рж╕рзНржЯржХ рж╕рзАржорж┐ржд!\n\nрждрж╛рзЬрж╛рждрж╛рзЬрж┐ ржЖржкржирж╛рж░ ржиржорзНржмрж░ рж╕ржВржЧрзНрж░рж╣ ржХрж░рждрзЗ ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржиред\n\nЁЯСЗЁЯСЗЁЯСЗ",
        "broadcast_deleted": "тЬЕ ржкрзВрж░рзНржмрзЗрж░ 'ржирждрзБржи ржиржорзНржмрж░' ржШрзЛрж╖ржгрж╛ржЯрж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред",
        "delnum_prompt": "ЁЯЧСя╕П ржиржорзНржмрж░ ржбрж┐рж▓рж┐ржЯ ржХрж░рждрзЗ, ржлрж░ржорзНржпрж╛ржЯ ржЕржирзБрж╕рж░ржг ржХрж░рзБржи:\n`/delnumber <Number>`",
        "delnum_success": "тЬЕ ржиржорзНржмрж░ `{number}` рж╕ржлрж▓ржнрж╛ржмрзЗ ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред",
        "delnum_not_found": "тЭМ ржиржорзНржмрж░ `{number}` ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред",
        "reactivate_prompt": "ЁЯФД ржиржорзНржмрж░ ржкрзБржирж░рж╛рзЯ рж╕ржХрзНрж░рж┐рзЯ ржХрж░рждрзЗ:\n`/reactivate <Number>`",
        "reactivate_success": "тЬЕ ржиржорзНржмрж░ `{number}` рж╕ржлрж▓ржнрж╛ржмрзЗ ржкрзБржирж░рж╛рзЯ рж╕ржХрзНрж░рж┐рзЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред",
        "view_reported_header": "ЁЯУД рж░рж┐ржкрзЛрж░рзНржЯ ржХрж░рж╛ ржиржорзНржмрж░рзЗрж░ рждрж╛рж▓рж┐ржХрж╛:",
        "view_expired_header": "тМЫ ржПржХрзНрж╕ржкрж╛ржпрж╝рж╛рж░ рж╣ржУрзЯрж╛ ржиржорзНржмрж░рзЗрж░ рждрж╛рж▓рж┐ржХрж╛:",
        "no_reported_numbers": "ЁЯСН ржХрзЛржирзЛ рж░рж┐ржкрзЛрж░рзНржЯ ржХрж░рж╛ ржиржорзНржмрж░ ржирзЗржЗред",
        "no_expired_numbers": "ЁЯСН ржХрзЛржирзЛ ржПржХрзНрж╕ржкрж╛ржпрж╝рж╛рж░ рж╣ржУрзЯрж╛ ржиржорзНржмрж░ ржирзЗржЗред",
        "ban_user_prompt": "ЁЯЪл ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржмрзНржпрж╛ржи ржХрж░рждрзЗ:\n`/ban <User_ID>`",
        "ban_success": "тЬЕ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА `{user_id}`-ржХрзЗ рж╕ржлрж▓ржнрж╛ржмрзЗ ржмрзНржпрж╛ржи ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред",
        "unban_user_prompt": "тЬЕ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржЖржиржмрзНржпрж╛ржи ржХрж░рждрзЗ:\n`/unban <User_ID>`",
        "unban_success": "тЬЕ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА `{user_id}`-ржХрзЗ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЖржиржмрзНржпрж╛ржи ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред",
        "user_not_found": "ЁЯд╖ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА `{user_id}`-ржХрзЗ ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред",
        "broadcast_sent": "тЬЕ ржмрж╛рж░рзНрждрж╛ржЯрж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ {count} ржЬржи ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржХрзЗ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред",
        "broadcast_no_message": "тЭМ ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ /broadcast ржХржорж╛ржирзНржбрзЗрж░ рж╕рж╛ржерзЗ ржПржХржЯрж┐ ржмрж╛рж░рзНрждрж╛ ржжрж┐ржиред",
        "delbroadcast_success": "тЬЕ рж╕рж░рзНржмрж╢рзЗрж╖ ржХрж╛рж╕рзНржЯржо ржШрзЛрж╖ржгрж╛ржЯрж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛ рж╢рзБрж░рзБ рж╣рзЯрзЗржЫрзЗред",
        "admin_announcement": "ЁЯУг ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржШрзЛрж╖ржгрж╛ ЁЯУг",
        "del_service_prompt": "ЁЯЧСя╕П ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╕рж╛рж░рзНржнрж┐рж╕рзЗрж░ рж╕ржм ржиржорзНржмрж░ ржбрж┐рж▓рж┐ржЯ ржХрж░рждрзЗ:\n`/del_service <Service>`",
        "del_service_success": "тЬЕ `{service}` рж╕рж╛рж░рзНржнрж┐рж╕рзЗрж░ ржорзЛржЯ {count} ржЯрж┐ ржиржорзНржмрж░ рж╕ржлрж▓ржнрж╛ржмрзЗ ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред",
        "del_all_prompt": "ЁЯФ┤ **рж╕рждрж░рзНржХржмрж╛рж░рзНрждрж╛!** ЁЯФ┤\nржЖржкржирж┐ ржХрж┐ рж╕рждрзНржпрж┐ржЗ рж╕ржХрж▓ рж╕рж╛рж░рзНржнрж┐рж╕рзЗрж░ рж╕ржм ржиржорзНржмрж░ ржбрж┐рж▓рж┐ржЯ ржХрж░рждрзЗ ржЪрж╛ржи? ржПржЗ ржХрж╛ржЬржЯрж┐ ржЖрж░ ржлрзЗрж░рж╛ржирзЛ ржпрж╛ржмрзЗ ржирж╛ред\n\nржирж┐рж╢рзНржЪрж┐ржд ржХрж░рждрзЗ, рж░рж┐ржкрзНрж▓рж╛ржЗ ржжрж┐ржи: `/del_all YES`",
        "del_all_success": "тЬЕ ржбрж╛ржЯрж╛ржмрзЗрж╕ ржерзЗржХрзЗ рж╕ржХрж▓ ржиржорзНржмрж░ рж╕ржлрж▓ржнрж╛ржмрзЗ ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред",
        "del_all_cancelled": "тЭМ ржбрж┐рж▓рж┐ржЯ ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред",
        "admin_guide_button": "ЁЯУЬ Admin Guide",
        "admin_guide_header": "ЁЯСС **ржЕрзНржпрж╛ржбржорж┐ржи ржХржорж╛ржирзНржб ржЧрж╛ржЗржб** ЁЯСС\n\n",
        "admin_guide_text": "**ржиржорзНржмрж░ ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛:**\nЁЯФ╣ `/add <Service> <Num1> <Num2>...`\n   - ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╕рж╛рж░рзНржнрж┐рж╕рзЗ ржПржХ ржмрж╛ ржПржХрж╛ржзрж┐ржХ ржиржорзНржмрж░ ржпрзЛржЧ ржХрж░рзЗред\nЁЯФ╣ `/delnumber <Number>`\n   - ржПржХржЯрж┐ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржиржорзНржмрж░ ржбрж┐рж▓рж┐ржЯ ржХрж░рзЗред\nЁЯФ╣ `/del_service <Service>`\n   - ржПржХржЯрж┐ рж╕рж╛рж░рзНржнрж┐рж╕рзЗрж░ *рж╕ржХрж▓* ржиржорзНржмрж░ ржбрж┐рж▓рж┐ржЯ ржХрж░рзЗред\nЁЯФ╣ `/del_all`\n   - ржбрж╛ржЯрж╛ржмрзЗрж╕рзЗрж░ *рж╕ржХрж▓* ржиржорзНржмрж░ ржбрж┐рж▓рж┐ржЯ ржХрж░рзЗ (рж╕рждрж░рзНржХрждрж╛рж░ рж╕рж╛ржерзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи)ред\nЁЯФ╣ `/reactivate <Number>`\n   - рж░рж┐ржкрзЛрж░рзНржЯ рж╣ржУрзЯрж╛ ржмрж╛ ржмрзНржпржмрж╣рзГржд ржиржорзНржмрж░ ржкрзБржирж░рж╛рзЯ рж╕ржХрзНрж░рж┐рзЯ ржХрж░рзЗред\n\n**ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛:**\nЁЯФ╕ `/ban <User_ID>`\n   - ржПржХржЬржи ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржХрзЗ ржмрзНржпрж╛ржи ржХрж░рзЗред\nЁЯФ╕ `/unban <User_ID>`\n   - ржмрзНржпрж╛ржи рж╣ржУрзЯрж╛ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржХрзЗ ржЖржиржмрзНржпрж╛ржи ржХрж░рзЗред\n\n**ржпрзЛржЧрж╛ржпрзЛржЧ:**\nтЦкя╕П `/broadcast <Message>`\n   - рж╕ржХрж▓ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржХрзЗ ржмрж╛рж░рзНрждрж╛ ржкрж╛ржарж╛рзЯред\nтЦкя╕П `/delbroadcast`\n   - рж╕рж░рзНржмрж╢рзЗрж╖ ржкрж╛ржарж╛ржирзЛ ржмрзНрж░ржбржХрж╛рж╕рзНржЯ ржбрж┐рж▓рж┐ржЯ ржХрж░рзЗред",
        "back_to_admin_panel_button": "тмЕя╕П ржЕрзНржпрж╛ржбржорж┐ржи ржкрзНржпрж╛ржирзЗрж▓",
        "back_button": "тмЕя╕П ржкрж┐ржЫржирзЗ",
        "main_menu_prompt": "ржкрзНрж░ржзрж╛ржи ржорзЗржирзБ ржерзЗржХрзЗ ржПржХржЯрж┐ ржЕржкрж╢ржи ржмрзЗржЫрзЗ ржирж┐ржиред",
    },
    # English translations are omitted for brevity but remain unchanged in the code
}


# -----------------------------------------------------------------------------
# |                      рж▓ржЧрж┐ржВ ржУ ржУрзЯрзЗржм рж╕рж╛рж░рзНржнрж╛рж░ рж╕рзЗржЯржЖржк (ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд)                      |
# -----------------------------------------------------------------------------
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

flask_app = Flask(__name__)
@flask_app.route('/')
def keep_alive():
    return "Bot is alive and running successfully!"

def run_flask():
    port = int(os.environ.get('PORT', 8080))
    flask_app.run(host='0.0.0.0', port=port)

# -----------------------------------------------------------------------------
# |                         ржбрж╛ржЯрж╛ржмрзЗрж╕ ржПржмржВ ржкрзНрж░ржзрж╛ржи ржлрж╛ржВрж╢ржи (ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд)                          |
# -----------------------------------------------------------------------------
async def get_db_conn():
    return await psycopg.AsyncConnection.connect(DATABASE_URL)

async def setup_database(app: Application):
    logger.info("Connecting to database and starting robust schema verification...")
    try:
        async with await get_db_conn() as aconn:
            async with aconn.cursor() as acur:
                await acur.execute("""
                    CREATE TABLE IF NOT EXISTS users (
                        user_id BIGINT PRIMARY KEY, first_name VARCHAR(255), language VARCHAR(5) DEFAULT 'bn',
                        strikes INT DEFAULT 0, is_banned BOOLEAN DEFAULT FALSE, ban_until TIMESTAMP,
                        last_number_success_at TIMESTAMP
                    );
                    CREATE TABLE IF NOT EXISTS numbers (
                        id SERIAL PRIMARY KEY, phone_number VARCHAR(25) UNIQUE NOT NULL, service VARCHAR(50) NOT NULL
                    );
                    CREATE TABLE IF NOT EXISTS broadcast_messages (
                        id SERIAL PRIMARY KEY, user_id BIGINT NOT NULL, message_id BIGINT NOT NULL, broadcast_type VARCHAR(50) NOT NULL
                    );
                """)
                required_columns = {
                    "is_available": "BOOLEAN DEFAULT TRUE", "is_reported": "BOOLEAN DEFAULT FALSE",
                    "assigned_to": "BIGINT", "assigned_at": "TIMESTAMP"
                }
                for column, col_type in required_columns.items():
                    await acur.execute("SELECT 1 FROM information_schema.columns WHERE table_name='numbers' AND column_name=%s", (column,))
                    if not await acur.fetchone():
                        logger.warning(f"Column '{column}' not found. Adding it now...")
                        await acur.execute(f"ALTER TABLE numbers ADD COLUMN {column} {col_type};")
                        logger.info(f"Successfully added '{column}' column.")
                await aconn.commit()
        logger.info("SUCCESS: Database schema up-to-date.")
        await app.bot.send_message(chat_id=ADMIN_USER_ID, text="тЬЕ Bot Deployed/Restarted with all fixes and features!")
    except Exception as e:
        logger.error(f"CRITICAL: Database failure! Error: {e}")

async def get_user_lang(user_id: int) -> str:
    async with await get_db_conn() as aconn:
        async with aconn.cursor() as acur:
            await acur.execute("SELECT language FROM users WHERE user_id = %s", (user_id,))
            result = await acur.fetchone()
            return result[0] if result and result[0] else 'bn'

async def find_available_number(service: str):
    async with await get_db_conn() as aconn:
        async with aconn.cursor(row_factory=psycopg.rows.dict_row) as acur:
            await acur.execute("SELECT id, phone_number FROM numbers WHERE service ILIKE %s AND is_available = TRUE AND is_reported = FALSE ORDER BY id LIMIT 1", (service,))
            return await acur.fetchone()

# -----------------------------------------------------------------------------
# |                      рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ рж╕рж┐рж╕рзНржЯрзЗржорзЗрж░ ржЬржмрж╕ (ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд)                      |
# -----------------------------------------------------------------------------
async def inactivity_strike_job(context: ContextTypes.DEFAULT_TYPE):
    # ... (ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд)
    job = context.job; user_id = job.data['user_id']; number_id = job.data['number_id']; lang = await get_user_lang(user_id)
    async with await get_db_conn() as aconn:
        async with aconn.cursor(row_factory=psycopg.rows.dict_row) as acur:
            await acur.execute("SELECT assigned_to FROM numbers WHERE id = %s", (number_id,)); result = await acur.fetchone()
            if not result or result['assigned_to'] != user_id: return
            await acur.execute("UPDATE users SET strikes = strikes + 1 WHERE user_id = %s RETURNING strikes", (user_id,)); user_data = await acur.fetchone(); new_strikes = user_data['strikes']
            await acur.execute("UPDATE numbers SET is_available = TRUE, assigned_to = NULL, assigned_at = NULL WHERE id = %s", (number_id,)); await aconn.commit()
            if new_strikes >= MAX_STRIKES:
                ban_until = datetime.datetime.now() + datetime.timedelta(hours=BAN_HOURS)
                await acur.execute("UPDATE users SET is_banned = TRUE, ban_until = %s WHERE user_id = %s", (ban_until, user_id)); await aconn.commit()
                await context.bot.send_message(user_id, LANG_TEXT[lang]['ban_message'].format(max_strikes=MAX_STRIKES, hours=BAN_HOURS))
                context.job_queue.run_once(auto_unban_job, BAN_HOURS * 3600, data={'user_id': user_id}, name=f"unban_{user_id}")
            else: await context.bot.send_message(user_id, LANG_TEXT[lang]['strike_warning'].format(minutes=INACTIVITY_MINUTES, strikes=new_strikes, max_strikes=MAX_STRIKES))
async def auto_unban_job(context: ContextTypes.DEFAULT_TYPE):
    # ... (ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд)
    user_id = context.job.data['user_id']; lang = await get_user_lang(user_id)
    async with await get_db_conn() as aconn:
        async with aconn.cursor() as acur:
            await acur.execute("UPDATE users SET strikes = 0, is_banned = FALSE, ban_until = NULL WHERE user_id = %s", (user_id,)); await aconn.commit()
    try: await context.bot.send_message(user_id, LANG_TEXT[lang]['unban_message'])
    except Forbidden: logger.warning(f"User {user_id} blocked the bot.")
async def daily_cleanup_job(context: ContextTypes.DEFAULT_TYPE):
    # ... (ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд)
    logger.info("Running daily cleanup..."); async with await get_db_conn() as aconn:
        async with aconn.cursor() as acur:
            await acur.execute("DELETE FROM users WHERE strikes = 0 AND is_banned = FALSE;"); await aconn.commit()
            logger.info(f"{acur.rowcount} inactive users cleaned up.")

# -----------------------------------------------------------------------------
# |                      ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржмржЯрзЗрж░ рж╕ржХрж▓ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░                       |
# -----------------------------------------------------------------------------
# ... (start_command, handle_get_number ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд)
def get_main_reply_keyboard(user_id: int):
    keyboard = [[GET_NUMBER_TEXT], [MY_STATS_TEXT, SUPPORT_TEXT], [LANGUAGE_TEXT]]
    if user_id == ADMIN_USER_ID: keyboard.insert(0, [ADMIN_PANEL_TEXT])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
async def get_number_options_keyboard(lang: str):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("ЁЯТО Facebook", callback_data="get_number_facebook")], [InlineKeyboardButton("тЬИя╕П Telegram", callback_data="get_number_telegram")],
        [InlineKeyboardButton("ЁЯТм WhatsApp", callback_data="get_number_whatsapp")], [InlineKeyboardButton(LANG_TEXT[lang]['back_button'], callback_data="back_to_main")]])
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user; lang = await get_user_lang(user.id)
    async with await get_db_conn() as aconn:
        async with aconn.cursor() as acur:
            await acur.execute("INSERT INTO users (user_id, first_name, language) VALUES (%s, %s, %s) ON CONFLICT (user_id) DO UPDATE SET first_name = EXCLUDED.first_name", (user.id, user.first_name, lang)); await aconn.commit()
    await update.message.reply_text(LANG_TEXT[lang]['welcome'].format(first_name=user.first_name), reply_markup=get_main_reply_keyboard(user.id))
async def handle_get_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id; lang = await get_user_lang(user_id)
    async with await get_db_conn() as aconn:
        async with aconn.cursor(row_factory=psycopg.rows.dict_row) as acur:
            await acur.execute("SELECT is_banned, ban_until FROM users WHERE user_id = %s", (user_id,)); user_status = await acur.fetchone()
            if user_status and user_status['is_banned']:
                unban_time = user_status['ban_until'].strftime('%Y-%m-%d %H:%M'); await update.message.reply_text(LANG_TEXT[lang]['status_banned'].format(hours=BAN_HOURS, unban_time=unban_time)); return
    await update.message.reply_text(text=LANG_TEXT[lang]['choose_service'], reply_markup=await get_number_options_keyboard(lang))

# тЬЕ рж╕ржорж╛ржзрж╛ржи рзз: My Stats ржмрж╛ржЯржирзЗрж░ ржнрзБрж▓ рж╕ржВрж╢рзЛржзржи
async def handle_my_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang = await get_user_lang(user_id)
    async with await get_db_conn() as aconn:
        async with aconn.cursor(row_factory=psycopg.rows.dict_row) as acur:
            await acur.execute("SELECT strikes, is_banned, ban_until FROM users WHERE user_id = %s", (user_id,))
            stats = await acur.fetchone()
            if stats:
                # ржПржЦрж╛ржирзЗ 'MAX_STRIkes' ржПрж░ ржкрж░рж┐ржмрж░рзНрждрзЗ 'MAX_STRIKES' рж╣ржмрзЗ
                message = f"{LANG_TEXT[lang]['stats_header']}\n\n{LANG_TEXT[lang]['strikes']}: {stats['strikes']}/{MAX_STRIKES}\n"
                if stats['is_banned']:
                    unban_time = stats['ban_until'].strftime('%Y-%m-%d %H:%M') if stats['ban_until'] else 'N/A'
                    message += LANG_TEXT[lang]['status_banned'].format(hours=BAN_HOURS, unban_time=unban_time)
                else:
                    message += f"{LANG_TEXT[lang]['status_normal']}"
            else:
                message = LANG_TEXT[lang]['stats_not_found']
    await update.message.reply_text(text=message)

# ... (handle_support, handle_language_button ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд)
async def handle_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = await get_user_lang(update.effective_user.id); reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton(text=LANG_TEXT[lang]['support_button'], url=f"https://t.me/{SUPPORT_USERNAME.lstrip('@')}")]])
    await update.message.reply_text(text=LANG_TEXT[lang]['support_prompt'], reply_markup=reply_markup)
async def handle_language_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = await get_user_lang(update.effective_user.id); reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("ЁЯЗзЁЯЗй ржмрж╛ржВрж▓рж╛", callback_data="set_lang_bn")], [InlineKeyboardButton("ЁЯЗмЁЯЗз English", callback_data="set_lang_en")]])
    await update.message.reply_text(text=LANG_TEXT[lang]['choose_language'], reply_markup=reply_markup)

# тЬЕ рж╕ржорж╛ржзрж╛ржи рзй: ржЕрзНржпрж╛ржбржорж┐ржиржХрзЗ ржПржХржмрж╛рж░ рж╕рждрж░рзНржХржмрж╛рж░рзНрждрж╛ ржкрж╛ржарж╛ржирзЛрж░ рж▓ржЬрж┐ржХ
async def handle_button_press(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data
    lang = await get_user_lang(user_id)
    
    if data.startswith("get_number_"):
        service = data.split("_")[2].capitalize()
        await query.edit_message_text(text=LANG_TEXT[lang]['searching_number'].format(service=service))
        async with await get_db_conn() as aconn:
            async with aconn.cursor(row_factory=psycopg.rows.dict_row) as acur:
                await acur.execute("SELECT last_number_success_at FROM users WHERE user_id = %s", (user_id,))
                user = await acur.fetchone()
                if user and user['last_number_success_at'] and datetime.datetime.now() < user['last_number_success_at'] + datetime.timedelta(minutes=COOLDOWN_MINUTES):
                    await query.edit_message_text(LANG_TEXT[lang]['cooldown_message'].format(minutes=COOLDOWN_MINUTES))
                    return
        
        number_data = await find_available_number(service)
        if number_data:
            # ... (ржЖржЧрзЗрж░ ржорждрзЛржЗ ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд)
            number_id = number_data['id']
            async with await get_db_conn() as aconn:
                async with aconn.cursor() as acur:
                    await acur.execute("UPDATE numbers SET is_available = FALSE, assigned_to = %s, assigned_at = NOW() WHERE id = %s", (user_id, number_id)); await aconn.commit()
            otp_keyboard = InlineKeyboardMarkup([[InlineKeyboardButton(LANG_TEXT[lang]['otp_received_button'], callback_data=f"otp_ok_{number_id}")], [InlineKeyboardButton(LANG_TEXT[lang]['otp_failed_button'], callback_data=f"otp_fail_{number_id}")]])
            await query.edit_message_text(text=LANG_TEXT[lang]['number_found'].format(phone_number=number_data['phone_number']), reply_markup=otp_keyboard, parse_mode='Markdown')
            context.job_queue.run_once(inactivity_strike_job, INACTIVITY_MINUTES * 60, data={'user_id': user_id, 'number_id': number_id}, name=f"strike_{user_id}_{number_id}")
        else:
            await query.edit_message_text(text=LANG_TEXT[lang]['no_number_available'].format(service=service))
            # рж╕рждрж░рзНржХржмрж╛рж░рзНрждрж╛ ржкрж╛ржарж╛ржирзЛрж░ ржирждрзБржи рж▓ржЬрж┐ржХ
            if 'stock_alert_sent' not in context.bot_data:
                context.bot_data['stock_alert_sent'] = set()
            
            if service not in context.bot_data['stock_alert_sent']:
                try:
                    await context.bot.send_message(chat_id=ADMIN_USER_ID, text=f"тЪая╕П **рж╕рзНржЯржХ ржЦрж╛рж▓рж┐!** тЪая╕П\n\nржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░рж╛ **{service}** рж╕рж╛рж░рзНржнрж┐рж╕рзЗрж░ ржЬржирзНржп ржиржорзНржмрж░ ржЦрзБржБржЬрзЗ ржкрж╛ржЪрзНржЫрзЗржи ржирж╛ред ржПржЗ ржмрж╛рж░рзНрждрж╛ржЯрж┐ ржПржХржмрж╛рж░ржЗ ржкрж╛ржарж╛ржирзЛ рж╣рж▓рзЛред", parse_mode='Markdown')
                    context.bot_data['stock_alert_sent'].add(service)
                except Exception as e:
                    logger.error(f"Could not send stock alert to admin: {e}")

    # ... (ржмрж╛ржХрж┐ elif ржХржирзНржбрж┐рж╢ржиржЧрзБрж▓рзЛ ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд)
    elif data.startswith("otp_ok_"):
        number_id = int(data.split("_")[2]); jobs = context.job_queue.get_jobs_by_name(f"strike_{user_id}_{number_id}")
        for job in jobs: job.schedule_removal()
        async with await get_db_conn() as aconn:
            async with aconn.cursor() as acur:
                await acur.execute("UPDATE users SET last_number_success_at = NOW() WHERE user_id = %s", (user_id,)); await acur.execute("UPDATE numbers SET assigned_to = NULL WHERE id = %s", (number_id,)); await aconn.commit()
        await query.edit_message_text(LANG_TEXT[lang]['thank_you_for_otp'].format(minutes=COOLDOWN_MINUTES))
    elif data.startswith("otp_fail_"):
        number_id = int(data.split("_")[2]); jobs = context.job_queue.get_jobs_by_name(f"strike_{user_id}_{number_id}")
        for job in jobs: job.schedule_removal()
        async with await get_db_conn() as aconn:
            async with aconn.cursor() as acur:
                await acur.execute("UPDATE numbers SET is_reported = TRUE, is_available = FALSE, assigned_to = NULL WHERE id = %s", (number_id,)); await aconn.commit()
        await query.edit_message_text(LANG_TEXT[lang]['report_success'])
        await query.message.reply_text(text=LANG_TEXT[lang]['choose_service'], reply_markup=await get_number_options_keyboard(lang))
    elif data.startswith("set_lang_"):
        new_lang = data.split("_")[2]
        async with await get_db_conn() as aconn:
            async with aconn.cursor() as acur: await acur.execute("UPDATE users SET language = %s WHERE user_id = %s", (new_lang, user_id)); await aconn.commit()
        await query.message.delete(); await query.message.reply_text(LANG_TEXT[new_lang]['lang_changed'])
    elif data == "back_to_main":
        await query.message.delete(); await query.message.reply_text(LANG_TEXT[lang]['main_menu_prompt'])

# -----------------------------------------------------------------------------
# |                      ЁЯСС ржЕрзНржпрж╛ржбржорж┐ржи ржкрзНржпрж╛ржирзЗрж▓ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ (ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд) ЁЯСС                      |
# -----------------------------------------------------------------------------
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд)
    if update.effective_user.id != ADMIN_USER_ID: return
    lang = await get_user_lang(ADMIN_USER_ID)
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("тЮХ Add Number", callback_data="admin_add"), InlineKeyboardButton("ЁЯЧСя╕П Delete Number", callback_data="admin_del")],
        [InlineKeyboardButton("ЁЯФД Reactivate Number", callback_data="admin_reactivate")],
        [InlineKeyboardButton("ЁЯУД View Reported", callback_data="admin_view_reported"), InlineKeyboardButton("тМЫ View Expired", callback_data="admin_view_expired")],
        [InlineKeyboardButton("ЁЯУв Broadcast Msg", callback_data="admin_broadcast"), InlineKeyboardButton("ЁЯЧСя╕П Delete Broadcast", callback_data="admin_del_broadcast")],
        [InlineKeyboardButton("ЁЯЪл Ban User", callback_data="admin_ban"), InlineKeyboardButton("тЬЕ Unban User", callback_data="admin_unban")],
        [InlineKeyboardButton(LANG_TEXT[lang]['admin_guide_button'], callback_data="admin_guide")],
        [InlineKeyboardButton(LANG_TEXT[lang]['back_button'], callback_data="back_to_main")]])
    if update.callback_query: await update.callback_query.edit_message_text(LANG_TEXT[lang]['admin_panel_prompt'], reply_markup=keyboard)
    else: await update.message.reply_text(LANG_TEXT[lang]['admin_panel_prompt'], reply_markup=keyboard)
async def handle_admin_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд)
    query = update.callback_query; await query.answer(); user_id = query.from_user.id
    if user_id != ADMIN_USER_ID: return
    data = query.data; lang = await get_user_lang(user_id)
    prompts = { "admin_add": LANG_TEXT[lang]['add_number_prompt'], "admin_del": LANG_TEXT[lang]['delnum_prompt'], "admin_reactivate": LANG_TEXT[lang]['reactivate_prompt'], "admin_broadcast": "тЮбя╕П Send your broadcast message now.", "admin_del_broadcast": "Are you sure you want to delete the last custom broadcast?", "admin_ban": LANG_TEXT[lang]['ban_user_prompt'], "admin_unban": LANG_TEXT[lang]['unban_user_prompt'], }
    if data in prompts: await query.edit_message_text(prompts[data])
    elif data == "admin_guide":
        guide_text = LANG_TEXT[lang]['admin_guide_header'] + LANG_TEXT[lang]['admin_guide_text']
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton(LANG_TEXT[lang]['back_to_admin_panel_button'], callback_data="back_to_admin_panel")]])
        await query.edit_message_text(guide_text, reply_markup=keyboard, parse_mode='Markdown')
    elif data == "back_to_admin_panel": await admin_panel(update, context)
    elif data == "admin_view_reported":
        async with await get_db_conn() as aconn:
            async with aconn.cursor(row_factory=psycopg.rows.dict_row) as acur:
                await acur.execute("SELECT phone_number, service FROM numbers WHERE is_reported = TRUE"); numbers = await acur.fetchall()
        if numbers: message = LANG_TEXT[lang]['view_reported_header'] + "\n\n" + "\n".join([f"`{n['phone_number']}` ({n['service']})" for n in numbers])
        else: message = LANG_TEXT[lang]['no_reported_numbers']
        await query.edit_message_text(message, parse_mode='Markdown')
    elif data == "admin_view_expired":
         async with await get_db_conn() as aconn:
            async with aconn.cursor(row_factory=psycopg.rows.dict_row) as acur:
                await acur.execute("SELECT phone_number, service FROM numbers WHERE assigned_to IS NOT NULL AND assigned_at < NOW() - INTERVAL '5 minutes'"); numbers = await acur.fetchall()
         if numbers: message = LANG_TEXT[lang]['view_expired_header'] + "\n\n" + "\n".join([f"`{n['phone_number']}` ({n['service']})" for n in numbers])
         else: message = LANG_TEXT[lang]['no_expired_numbers']
         await query.edit_message_text(message, parse_mode='Markdown')

# --- ржЕрзНржпрж╛ржбржорж┐ржи ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ---
# тЬЕ рж╕ржорж╛ржзрж╛ржи рзй: ржЕрзНржпрж╛ржбржорж┐ржи рж╕рждрж░рзНржХржмрж╛рж░рзНрждрж╛ рж░рж┐рж╕рзЗржЯ ржХрж░рж╛рж░ рж▓ржЬрж┐ржХ
async def add_number_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID: return
    lang = await get_user_lang(ADMIN_USER_ID); args = context.args
    if len(args) < 2: await update.message.reply_text(LANG_TEXT[lang]['add_number_prompt']); return
    service = args[0].capitalize()
    numbers_to_add_str = ' '.join(args[1:]).replace(',', ' '); numbers_to_add = [num.strip() for num in numbers_to_add_str.split() if num.strip().isdigit()]
    if not numbers_to_add: await update.message.reply_text("Please provide valid numbers."); return
    added_count = 0
    async with await get_db_conn() as aconn:
        try:
            async with aconn.cursor() as acur:
                for number in numbers_to_add:
                    try: await acur.execute("INSERT INTO numbers (phone_number, service) VALUES (%s, %s)", (number, service)); added_count += 1
                    except psycopg.errors.UniqueViolation: logger.warning(f"Number {number} already exists.")
            await aconn.commit()
        except Exception as e: logger.error(f"Error adding numbers: {e}"); await aconn.rollback(); await update.message.reply_text("Error adding numbers."); return
    if added_count > 0:
        await update.message.reply_text(LANG_TEXT[lang]['number_added_success'].format(count=added_count, service=service))
        # рж╕рждрж░рзНржХржмрж╛рж░рзНрждрж╛ рж░рж┐рж╕рзЗржЯ ржХрж░рж╛
        if 'stock_alert_sent' in context.bot_data and service in context.bot_data['stock_alert_sent']:
            context.bot_data['stock_alert_sent'].remove(service)
            logger.info(f"Stock alert for '{service}' has been reset.")
        await auto_broadcast_new_numbers(context, service, lang)
    else: await update.message.reply_text("No new numbers were added (possibly all were duplicates).")

# тЬЕ рж╕ржорж╛ржзрж╛ржи рзи: ржмрзНрж░ржбржХрж╛рж╕рзНржЯрзЗрж░ ржнрзБрж▓ рж╕ржВрж╢рзЛржзржи
async def auto_broadcast_new_numbers(context: ContextTypes.DEFAULT_TYPE, service: str, lang: str):
    bot = context.bot
    async with await get_db_conn() as aconn:
        async with aconn.cursor(row_factory=psycopg.rows.dict_row) as acur:
            await acur.execute("SELECT user_id, message_id FROM broadcast_messages WHERE broadcast_type = 'auto_new_number'")
            old_messages = await acur.fetchall()
            for msg in old_messages:
                try: await bot.delete_message(chat_id=msg['user_id'], message_id=msg['message_id'])
                except (Forbidden, BadRequest): pass
            await acur.execute("DELETE FROM broadcast_messages WHERE broadcast_type = 'auto_new_number'"); await aconn.commit()
    async with await get_db_conn() as aconn:
        async with aconn.cursor(row_factory=psycopg.rows.dict_row) as acur:
            await acur.execute("SELECT user_id, language FROM users WHERE is_banned = FALSE"); all_users = await acur.fetchall()
    new_message_ids = []
    current_date = datetime.datetime.now().strftime('%d-%m-%Y')
    for user in all_users:
        user_lang = user.get('language', 'bn')
        text_template = LANG_TEXT.get(user_lang, LANG_TEXT['bn'])['new_number_broadcast']
        # ржПржЦрж╛ржирзЗ .format() ржерзЗржХрзЗ ржЕржкрзНрж░рзЯрзЛржЬржирзАрзЯ ржЖрж░рзНржЧрзБржорзЗржирзНржЯ ржмрж╛ржж ржжрзЗржУрзЯрж╛ рж╣рзЯрзЗржЫрзЗ
        text = text_template.format(date=current_date, service=service)
        try:
            sent_message = await bot.send_message(chat_id=user['user_id'], text=text, parse_mode='Markdown')
            new_message_ids.append((user['user_id'], sent_message.message_id, 'auto_new_number'))
        except Forbidden: logger.warning(f"User {user['user_id']} blocked the bot.")
    async with await get_db_conn() as aconn:
        async with aconn.cursor() as acur:
            if new_message_ids: await acur.executemany("INSERT INTO broadcast_messages (user_id, message_id, broadcast_type) VALUES (%s, %s, %s)", new_message_ids); await aconn.commit()

# ... (ржмрж╛ржХрж┐ рж╕ржХрж▓ ржЕрзНржпрж╛ржбржорж┐ржи ржХржорж╛ржирзНржб ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд)
async def del_number_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID: return; lang = await get_user_lang(ADMIN_USER_ID);
    if not context.args: await update.message.reply_text(LANG_TEXT[lang]['delnum_prompt']); return
    number_to_del = context.args[0]
    async with await get_db_conn() as aconn:
        async with aconn.cursor() as acur:
            await acur.execute("DELETE FROM numbers WHERE phone_number = %s", (number_to_del,)); await aconn.commit()
            if acur.rowcount > 0: await update.message.reply_text(LANG_TEXT[lang]['delnum_success'].format(number=number_to_del))
            else: await update.message.reply_text(LANG_TEXT[lang]['delnum_not_found'].format(number=number_to_del))
async def reactivate_number_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID: return; lang = await get_user_lang(ADMIN_USER_ID);
    if not context.args: await update.message.reply_text(LANG_TEXT[lang]['reactivate_prompt']); return
    number_to_reactivate = context.args[0]
    async with await get_db_conn() as aconn:
        async with aconn.cursor() as acur:
            await acur.execute("UPDATE numbers SET is_available = TRUE, is_reported = FALSE, assigned_to = NULL, assigned_at = NULL WHERE phone_number = %s", (number_to_reactivate,)); await aconn.commit()
            if acur.rowcount > 0: await update.message.reply_text(LANG_TEXT[lang]['reactivate_success'].format(number=number_to_reactivate))
            else: await update.message.reply_text(LANG_TEXT[lang]['delnum_not_found'].format(number=number_to_reactivate))
async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID: return; lang = await get_user_lang(ADMIN_USER_ID)
    if not context.args: await update.message.reply_text(LANG_TEXT[lang]['broadcast_no_message']); return
    message_to_send = ' '.join(context.args)
    async with await get_db_conn() as aconn:
        async with aconn.cursor() as acur: await acur.execute("DELETE FROM broadcast_messages WHERE broadcast_type = 'manual'"); await aconn.commit()
    async with await get_db_conn() as aconn:
        async with aconn.cursor(row_factory=psycopg.rows.dict_row) as acur: await acur.execute("SELECT user_id, language FROM users"); all_users = await acur.fetchall()
    sent_count = 0; new_message_ids = []
    for user in all_users:
        header = LANG_TEXT[user['language']]['admin_announcement']; formatted_message = f"**{header}**\n\n{message_to_send}"
        try: sent_message = await context.bot.send_message(chat_id=user['user_id'], text=formatted_message, parse_mode='Markdown'); new_message_ids.append((user['user_id'], sent_message.message_id, 'manual')); sent_count += 1; await asyncio.sleep(0.1)
        except Forbidden: logger.warning(f"User {user['user_id']} blocked the bot.")
        except Exception as e: logger.error(f"Failed to send to {user['user_id']}: {e}")
    async with await get_db_conn() as aconn:
        async with aconn.cursor() as acur:
            if new_message_ids: await acur.executemany("INSERT INTO broadcast_messages (user_id, message_id, broadcast_type) VALUES (%s, %s, %s)", new_message_ids); await aconn.commit()
    await update.message.reply_text(LANG_TEXT[lang]['broadcast_sent'].format(count=sent_count))
async def del_broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID: return; lang = await get_user_lang(ADMIN_USER_ID)
    async with await get_db_conn() as aconn:
        async with aconn.cursor(row_factory=psycopg.rows.dict_row) as acur:
            await acur.execute("SELECT user_id, message_id FROM broadcast_messages WHERE broadcast_type = 'manual'"); messages_to_delete = await acur.fetchall()
            for msg in messages_to_delete:
                try: await context.bot.delete_message(chat_id=msg['user_id'], message_id=msg['message_id'])
                except (Forbidden, BadRequest): pass
            await acur.execute("DELETE FROM broadcast_messages WHERE broadcast_type = 'manual'"); await aconn.commit()
    await update.message.reply_text(LANG_TEXT[lang]['delbroadcast_success'])
async def ban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID: return; lang = await get_user_lang(ADMIN_USER_ID)
    if not context.args or not context.args[0].isdigit(): await update.message.reply_text(LANG_TEXT[lang]['ban_user_prompt']); return
    user_id_to_ban = int(context.args[0]); ban_until = datetime.datetime.now() + datetime.timedelta(days=999)
    async with await get_db_conn() as aconn:
        async with aconn.cursor() as acur:
            await acur.execute("UPDATE users SET is_banned = TRUE, ban_until = %s WHERE user_id = %s", (ban_until, user_id_to_ban)); await aconn.commit()
            if acur.rowcount > 0: await update.message.reply_text(LANG_TEXT[lang]['ban_success'].format(user_id=user_id_to_ban))
            else: await update.message.reply_text(LANG_TEXT[lang]['user_not_found'].format(user_id=user_id_to_ban))
async def unban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID: return; lang = await get_user_lang(ADMIN_USER_ID)
    if not context.args or not context.args[0].isdigit(): await update.message.reply_text(LANG_TEXT[lang]['unban_user_prompt']); return
    user_id_to_unban = int(context.args[0])
    async with await get_db_conn() as aconn:
        async with aconn.cursor() as acur:
            await acur.execute("UPDATE users SET is_banned = FALSE, ban_until = NULL, strikes = 0 WHERE user_id = %s", (user_id_to_unban,)); await aconn.commit()
            if acur.rowcount > 0: await update.message.reply_text(LANG_TEXT[lang]['unban_success'].format(user_id=user_id_to_unban))
            else: await update.message.reply_text(LANG_TEXT[lang]['user_not_found'].format(user_id=user_id_to_unban))
async def del_service_numbers_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID: return; lang = await get_user_lang(ADMIN_USER_ID)
    if not context.args: await update.message.reply_text(LANG_TEXT[lang]['del_service_prompt']); return
    service_to_del = context.args[0].capitalize()
    async with await get_db_conn() as aconn:
        async with aconn.cursor() as acur:
            await acur.execute("DELETE FROM numbers WHERE service ILIKE %s", (service_to_del,)); count = acur.rowcount; await aconn.commit()
    await update.message.reply_text(LANG_TEXT[lang]['del_service_success'].format(service=service_to_del, count=count))
async def del_all_numbers_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID: return; lang = await get_user_lang(ADMIN_USER_ID)
    if not context.args or context.args[0].upper() != 'YES': await update.message.reply_text(LANG_TEXT[lang]['del_all_prompt'], parse_mode='Markdown'); return
    async with await get_db_conn() as aconn:
        async with aconn.cursor() as acur: await acur.execute("TRUNCATE TABLE numbers RESTART IDENTITY;"); await aconn.commit()
    await update.message.reply_text(LANG_TEXT[lang]['del_all_success'])

# -----------------------------------------------------------------------------
# |                         ржлрж╛ржЗржирж╛рж▓ ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи ржЪрж╛рж▓рзБ ржХрж░рж╛ (ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд)                        |
# -----------------------------------------------------------------------------
def main() -> None:
    flask_thread = threading.Thread(target=run_flask); flask_thread.daemon = True; flask_thread.start()
    logger.info("Keep-alive server started.")
    bot_app = Application.builder().token(BOT_TOKEN).post_init(setup_database).build()
    job_queue = bot_app.job_queue
    job_queue.run_daily(daily_cleanup_job, time=datetime.time(hour=21, minute=0, tzinfo=datetime.timezone.utc))
    # ржЕрзНржпрж╛ржбржорж┐ржи ржХржорж╛ржирзНржб
    bot_app.add_handler(CommandHandler("add", add_number_command)); bot_app.add_handler(CommandHandler("delnumber", del_number_command))
    bot_app.add_handler(CommandHandler("reactivate", reactivate_number_command)); bot_app.add_handler(CommandHandler("broadcast", broadcast_command))
    bot_app.add_handler(CommandHandler("delbroadcast", del_broadcast_command)); bot_app.add_handler(CommandHandler("ban", ban_command))
    bot_app.add_handler(CommandHandler("unban", unban_command)); bot_app.add_handler(CommandHandler("del_service", del_service_numbers_command))
    bot_app.add_handler(CommandHandler("del_all", del_all_numbers_command))
    # ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржХржорж╛ржирзНржб
    bot_app.add_handler(CommandHandler("start", start_command))
    # ржмрж╛ржЯржи рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
    bot_app.add_handler(MessageHandler(filters.TEXT & filters.Regex(f'^{GET_NUMBER_TEXT}$'), handle_get_number)); bot_app.add_handler(MessageHandler(filters.TEXT & filters.Regex(f'^{MY_STATS_TEXT}$'), handle_my_stats))
    bot_app.add_handler(MessageHandler(filters.TEXT & filters.Regex(f'^{SUPPORT_TEXT}$'), handle_support)); bot_app.add_handler(MessageHandler(filters.TEXT & filters.Regex(f'^{LANGUAGE_TEXT}$'), handle_language_button))
    bot_app.add_handler(MessageHandler(filters.TEXT & filters.Regex(f'^{ADMIN_PANEL_TEXT}$'), admin_panel))
    # ржЗржирж▓рж╛ржЗржи ржмрж╛ржЯржи рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
    bot_app.add_handler(CallbackQueryHandler(handle_button_press, pattern="^(get_number_|otp_ok_|otp_fail_|set_lang_|back_to_main)"))
    bot_app.add_handler(CallbackQueryHandler(handle_admin_callbacks, pattern="^admin_|back_to_admin_panel"))
    logger.info("Telegram Bot starting polling...")
    bot_app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
