import logging
import datetime
import psycopg
import threading
import os
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# -----------------------------------------------------------------------------
# |                      ‚ö†Ô∏è ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶ï‡¶≤ ‡¶ó‡ßã‡¶™‡¶® ‡¶§‡¶•‡ßç‡¶Ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‚ö†Ô∏è                      |
# -----------------------------------------------------------------------------
# ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶è‡¶¨‡¶Ç ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶á‡¶â‡¶Ü‡¶∞‡¶è‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
BOT_TOKEN = "7925556669:AAE5F9zUGOK37niSd0x-YEQX8rn-xGd8Pl8" # ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
DATABASE_URL = "postgresql://niloy_number_bot_user:p2pmOrN2Kx7WjiC611qPGk1cVBqEbfeq@dpg-d20ii8nfte5s738v6elg-a/niloy_number_bot"
ADMIN_CHANNEL_ID = -4611753759
ADMIN_USER_ID = 7052442701
SUPPORT_USERNAME = "@NgRony"

# --- ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ---
LEASE_TIME_MINUTES = 10
COOLDOWN_MINUTES = 2
MAX_STRIKES = 3
BAN_HOURS = 24

# -----------------------------------------------------------------------------
# |                      ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶ì ‡¶ì‡ßü‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™                       |
# -----------------------------------------------------------------------------
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

flask_app = Flask(__name__)
@flask_app.route('/')
def keep_alive():
    return "Bot is alive and running successfully!"

def run_flask():
    port = int(os.environ.get('PORT', 8080))
    flask_app.run(host='0.0.0.0', port=port)

# -----------------------------------------------------------------------------
# |                         ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®                          |
# -----------------------------------------------------------------------------
async def get_db_conn():
    return await psycopg.AsyncConnection.connect(DATABASE_URL)

async def setup_database(app: Application):
    logger.info("Connecting to database...")
    try:
        async with await get_db_conn() as aconn:
            async with aconn.cursor() as acur:
                await acur.execute("""
                    CREATE TABLE IF NOT EXISTS users (user_id BIGINT PRIMARY KEY, first_name VARCHAR(255), strikes INT DEFAULT 0, is_banned BOOLEAN DEFAULT FALSE, ban_until TIMESTAMP, last_number_request_time TIMESTAMP);
                    CREATE TABLE IF NOT EXISTS numbers (id SERIAL PRIMARY KEY, phone_number VARCHAR(25) UNIQUE NOT NULL, service VARCHAR(50) NOT NULL, is_available BOOLEAN DEFAULT TRUE, is_reported BOOLEAN DEFAULT FALSE, assigned_to BIGINT, assigned_at TIMESTAMP);
                """)
        logger.info("SUCCESS: Database setup complete.")
        await app.bot.send_message(chat_id=ADMIN_USER_ID, text="‚úÖ **Bot Deployed/Restarted Successfully!**\nEverything is online and working.", parse_mode='Markdown')
    except Exception as e:
        logger.error(f"CRITICAL: Database or boot failure! Error: {e}")

# -----------------------------------------------------------------------------
# |                      ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶∏‡¶ï‡¶≤ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞                       |
# -----------------------------------------------------------------------------

# --- ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶§‡ßà‡¶∞‡¶ø‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§) ---
async def get_main_menu_keyboard(user_id):
    # ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶Æ‡ßá‡¶®‡ßÅ‡¶§‡ßá ‡¶è‡¶ñ‡¶® ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶è‡¶ï‡¶ü‡¶ø "‡¶∏‡¶ï‡¶≤ ‡¶Ö‡¶™‡¶∂‡¶®" ‡¶¨‡¶æ‡¶ü‡¶® ‡¶•‡¶æ‡¶ï‡¶¨‡ßá
    keyboard = [
        [InlineKeyboardButton("üéõÔ∏è ‡¶∏‡¶ï‡¶≤ ‡¶Ö‡¶™‡¶∂‡¶® ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶® üéõÔ∏è", callback_data="show_all_options")]
    ]
    # ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶Ø‡¶¶‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶π‡¶®, ‡¶§‡¶¨‡ßá‡¶á ‡¶ï‡ßá‡¶¨‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶¨‡¶æ‡¶ü‡¶®‡¶ü‡¶ø ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá
    if user_id == ADMIN_USER_ID:
        keyboard.append([InlineKeyboardButton("üëë Admin Panel üëë", callback_data="admin_panel")])
    return InlineKeyboardMarkup(keyboard)

async def get_all_options_keyboard():
    # ‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶∏‡¶¨ ‡¶¨‡¶æ‡¶ü‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
    keyboard = [
        [InlineKeyboardButton("üíé Get Facebook Number", callback_data="get_number_facebook")],
        [InlineKeyboardButton("‚úàÔ∏è Get Telegram Number", callback_data="get_number_telegram")],
        [InlineKeyboardButton("üí¨ Get WhatsApp Number", callback_data="get_number_whatsapp")],
        [InlineKeyboardButton("üìû Support", url=f"https://t.me/{SUPPORT_USERNAME}"), InlineKeyboardButton("üìä My Stats", callback_data="my_stats")],
        [InlineKeyboardButton("‚¨ÖÔ∏è ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶Æ‡ßá‡¶®‡ßÅ", callback_data="back_to_main")] # ‡¶™‡¶ø‡¶õ‡¶®‡ßá ‡¶Ø‡¶æ‡¶ì‡ßü‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®
    ]
    return InlineKeyboardMarkup(keyboard)

async def get_admin_panel_keyboard():
    keyboard = [
        [InlineKeyboardButton("‚ûï Add Number", callback_data="admin_add_number"), InlineKeyboardButton("üìä View Stats", callback_data="admin_view_stats")],
        [InlineKeyboardButton("üö´ Manage Bans", callback_data="admin_manage_bans")],
        [InlineKeyboardButton("‚¨ÖÔ∏è Back to Main Menu", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(keyboard)


# --- ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"User started: {user.first_name} ({user.id})")
    async with await get_db_conn() as aconn:
        async with aconn.cursor() as acur:
            await acur.execute("INSERT INTO users (user_id, first_name) VALUES (%s, %s) ON CONFLICT (user_id) DO UPDATE SET first_name = EXCLUDED.first_name", (user.id, user.first_name))
    
    reply_markup = await get_main_menu_keyboard(user.id)
    await update.message.reply_text(
        text=f"üëã **Welcome, {user.first_name}!**\n\nChoose a service below to get a temporary number.",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


# --- ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ---
async def handle_unknown_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶Ü‡¶ú‡ßá‡¶¨‡¶æ‡¶ú‡ßá ‡¶¨‡¶æ ‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶≤‡ßá ‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá"""
    logger.info(f"Received unknown text from user {update.effective_user.id}: '{update.message.text}'")
    reply_markup = await get_main_menu_keyboard(update.effective_user.id)
    await update.message.reply_text(
        text="ü§î ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶•‡¶æ‡¶ü‡¶ø ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡¶®‡¶ø‡•§\n\n‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü ‡¶∏‡ßá‡¶¨‡¶æ‡¶ü‡¶ø ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®‡•§",
        reply_markup=reply_markup
    )


# --- ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ (‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶ø‡¶§) ---
async def handle_button_press(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∞ "‡¶≤‡ßã‡¶°‡¶ø‡¶Ç" ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶®‡¶ø‡¶Æ‡ßá‡¶∂‡¶® ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ü‡¶ø ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø
    user_id = query.from_user.id
    data = query.data
    logger.info(f"Button '{data}' pressed by user {user_id}")
    
    # --- ‡¶®‡¶§‡ßÅ‡¶® "‡¶∏‡¶ï‡¶≤ ‡¶Ö‡¶™‡¶∂‡¶®" ‡¶¨‡¶æ‡¶ü‡¶® ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡¶æ ---
    if data == "show_all_options":
        reply_markup = await get_all_options_keyboard()
        await query.edit_message_text(
            text="‚öôÔ∏è **‡¶∏‡¶ï‡¶≤ ‡¶Ö‡¶™‡¶∂‡¶®**\n\n‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü ‡¶∏‡ßá‡¶¨‡¶æ‡¶ü‡¶ø ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    # --- ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡¶æ ‡¶°‡ßá‡¶ü‡¶æ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡¶æ ---
    elif data.startswith("get_number_"):
        service = data.split("_")[2].capitalize()
        
        async with await get_db_conn() as aconn:
            async with aconn.cursor(row_factory=psycopg.rows.dict_row) as acur:
                await acur.execute("SELECT * FROM users WHERE user_id = %s", (user_id,))
                user_data = await acur.fetchone()

                if user_data and user_data['is_banned']:
                    await query.edit_message_text(text="‚ùå **‡¶Ü‡¶™‡¶®‡¶ø ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®‡ßá ‡¶®‡¶ø‡¶∑‡¶ø‡¶¶‡ßç‡¶ß!**\n\n‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶∏‡¶Æ‡ßü ‡¶™‡¶∞ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", parse_mode='Markdown')
                    return
                
                # To-Do: ‡¶ï‡ßÅ‡¶≤‡¶°‡¶æ‡¶â‡¶® ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá

        # ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã
        await query.edit_message_text(
            text=f"üîç ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶∏‡ßç‡¶•‡¶æ‡ßü‡ßÄ **{service}** ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...\n‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
            parse_mode='Markdown'
        )
        # To-Do: ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶è‡¶®‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶Ü‡¶∏‡¶≤ ‡¶ï‡ßã‡¶° ‡¶≤‡¶ø‡¶ñ‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§
        # ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
        # number = await find_available_number(service)
        # if number:
        #     await query.edit_message_text(f"‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞: {number}")
        # else:
        #     await query.edit_message_text("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶è‡¶á ‡¶Æ‡ßÅ‡¶π‡ßÇ‡¶∞‡ßç‡¶§‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡ßá‡¶á‡•§")

    elif data == "my_stats":
        async with await get_db_conn() as aconn:
            async with aconn.cursor(row_factory=psycopg.rows.dict_row) as acur:
                await acur.execute("SELECT strikes, is_banned, ban_until FROM users WHERE user_id = %s", (user_id,))
                stats = await acur.fetchone()
                if stats:
                    ban_status = "‡¶π‡ßç‡¶Ø‡¶æ‡¶Å" if stats['is_banned'] else "‡¶®‡¶æ"
                    message = (
                        f"üìä **‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶®**\n\n"
                        f"‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶æ‡¶á‡¶ï: `{stats['strikes']}/{MAX_STRIKES}`\n"
                        f"‡¶®‡¶ø‡¶∑‡¶ø‡¶¶‡ßç‡¶ß: `{ban_status}`"
                    )
                    if stats['is_banned'] and stats['ban_until']:
                        message += f"\n‡¶®‡¶ø‡¶∑‡ßá‡¶ß‡¶æ‡¶ú‡ßç‡¶û‡¶æ ‡¶∂‡ßá‡¶∑ ‡¶π‡¶¨‡ßá: `{stats['ban_until'].strftime('%Y-%m-%d %H:%M:%S')}`"
                else:
                    message = "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶® ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡¶ø‡¶®‡•§"
        
        # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá '‡¶™‡¶ø‡¶õ‡¶®‡ßá' ‡¶¨‡¶æ‡¶ü‡¶®‡¶ü‡¶ø‡¶ï‡ßá 'back_to_main' ‡¶è‡¶∞ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡ßá 'show_all_options' ‡¶è ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶≤‡ßã ‡¶Ø‡¶æ‡¶§‡ßá ‡¶è‡¶ü‡¶ø ‡¶°‡ßç‡¶∞‡¶™-‡¶°‡¶æ‡¶â‡¶® ‡¶Æ‡ßá‡¶®‡ßÅ‡¶§‡ßá ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡ßü
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è ‡¶™‡¶ø‡¶õ‡¶®‡ßá", callback_data="show_all_options")]])
        await query.edit_message_text(text=message, reply_markup=reply_markup, parse_mode='Markdown')

    elif data == "admin_panel":
        if user_id == ADMIN_USER_ID:
            reply_markup = await get_admin_panel_keyboard()
            await query.edit_message_text(text="üëë **‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ**\n\n‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶™‡¶∂‡¶® ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®:", reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await query.answer("‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶á ‡¶Æ‡ßá‡¶®‡ßÅ‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶®‡¶®‡•§", show_alert=True)

    # --- ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡¶æ ---
    elif data == "admin_add_number":
        await query.edit_message_text(text="‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá, ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶á ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®: `+1234567890, ServiceName` (‡¶Ø‡ßá‡¶Æ‡¶®, `+99123456, Facebook`)", parse_mode='Markdown')
        # To-Do: ‡¶è‡¶∞‡¶™‡¶∞ MessageHandler ‡¶¶‡¶ø‡ßü‡ßá ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶®‡ßá‡¶ì‡ßü‡¶æ‡¶∞ ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶¨‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§

    elif data == "admin_view_stats":
        # To-Do: ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶Æ‡ßã‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞, ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶° ‡¶á‡¶â‡¶ú‡¶æ‡¶∞, ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ ‡¶ï‡ßã‡¶°‡•§
        await query.edit_message_text(text="‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ‡ßá‡¶∞ ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá... (‡¶è‡¶á ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞‡¶ü‡¶ø ‡¶è‡¶ñ‡¶®‡ßã ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡¶®‡¶ø)", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è ‡¶™‡¶ø‡¶õ‡¶®‡ßá", callback_data="admin_panel")]]))

    # --- ‡¶™‡¶ø‡¶õ‡¶®‡ßá ‡¶Ø‡¶æ‡¶ì‡ßü‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶® ---
    elif data == "back_to_main":
        user = query.from_user
        reply_markup = await get_main_menu_keyboard(user.id)
        await query.edit_message_text(
            text=f"üëã **‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ, {user.first_name}!**\n\n‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶∏‡ßç‡¶•‡¶æ‡ßü‡ßÄ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶™‡ßá‡¶§‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶∏‡ßá‡¶¨‡¶æ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®‡•§",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

# --- ‡¶∏‡¶Æ‡ßü ‡¶∂‡ßá‡¶∑ ‡¶π‡¶≤‡ßá ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶∞‡¶ø‡¶≤‡¶ø‡¶ú ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï (‡¶è‡¶ñ‡¶®‡¶ì ‡¶ñ‡¶æ‡¶≤‡¶ø) ---
async def auto_release_callback(context: ContextTypes.DEFAULT_TYPE):
    # To-Do: ‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶™‡¶∞‡ßá ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá
    pass

# -----------------------------------------------------------------------------
# |                         ‡¶´‡¶æ‡¶á‡¶®‡¶æ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ                        |
# -----------------------------------------------------------------------------
def main() -> None:
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    logger.info("Keep-alive server started.")

    bot_app = Application.builder().token(BOT_TOKEN).post_init(setup_database).build()
    
    # --- ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ---
    bot_app.add_handler(CommandHandler("start", start_command))
    bot_app.add_handler(CallbackQueryHandler(handle_button_press))
    
    # ‡¶è‡¶á ‡¶≤‡¶æ‡¶á‡¶®‡¶ü‡¶ø ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú (‡¶Ø‡¶æ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶®‡ßü) ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
    bot_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_unknown_text))

    logger.info("Telegram Bot starting polling...")
    bot_app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
