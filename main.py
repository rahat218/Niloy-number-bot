import logging
import datetime
import psycopg
import asyncio
import threading
import os
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from telegram.error import Forbidden

# -----------------------------------------------------------------------------
# |                      ‚ö†Ô∏è ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶ï‡¶≤ ‡¶ó‡ßã‡¶™‡¶® ‡¶§‡¶•‡ßç‡¶Ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‚ö†Ô∏è                      |
# -----------------------------------------------------------------------------
BOT_TOKEN = "7925556669:AAE5F9zUGOK37niSd0x-YEQX8rn-xGd8Pl8" # ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
DATABASE_URL = "postgresql://niloy_number_bot_user:p2pmOrN2Kx7WjiC611qPGk1cVBqEbfeq@dpg-d20ii8nfte5s738v6elg-a/niloy_number_bot"
ADMIN_USER_ID = 7052442701
SUPPORT_USERNAME = "@NgRony"

# --- ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ---
MAX_STRIKES = 3
BAN_HOURS = 24

# --- ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ---
GET_NUMBER_TEXT = "‚ú® Get Number üéóÔ∏è"
MY_STATS_TEXT = "üìä My Stats"
SUPPORT_TEXT = "üìû Support"
LANGUAGE_TEXT = "üåê Language"

# --- ‡¶¨‡¶π‡ßÅ‡¶≠‡¶æ‡¶∑‡¶ø‡¶ï ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ---
LANG_TEXT = {
    'bn': {
        "welcome": "üëã **‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ, {first_name}!**\n\n‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶ï‡ßÄ‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶™‡¶∂‡¶® ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®‡•§",
        "keyboard_hidden": "‡¶ï‡ßÄ‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶≤‡ßÅ‡¶ï‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ñ‡¶§‡ßá /start ‡¶ö‡¶æ‡¶™‡ßÅ‡¶®‡•§",
        "choose_service": "üî¢ ‡¶ï‡ßã‡¶® ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®? ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®:",
        "stats_header": "üìä **‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶®**",
        "strikes": "‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶æ‡¶á‡¶ï",
        "spam_count": "‡¶∏‡ßç‡¶™‡ßç‡¶Ø‡¶æ‡¶Æ",
        "status_banned": "‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏: {hours} ‡¶ò‡¶£‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶ø‡¶∑‡¶ø‡¶¶‡ßç‡¶ß",
        "status_normal": "‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏: ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ",
        "stats_not_found": "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶® ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡¶ø‡¶®‡•§",
        "support_prompt": "üìû ‡¶Ø‡ßá ‡¶ï‡ßã‡¶® ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ü‡¶ø‡¶Æ‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
        "support_button": "‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®",
        "unknown_command": "ü§î ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ü‡¶ø ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡¶®‡¶ø‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶ï‡ßÄ‡¶¨‡ßã‡¶∞‡ßç‡¶°‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
        "choose_language": "‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:",
        "lang_changed": "‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ' ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
        "searching_number": "üîç ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø **{service}** ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...",
        "no_number_available": "‚ùå **‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶è‡¶á ‡¶Æ‡ßÅ‡¶π‡ßÇ‡¶∞‡ßç‡¶§‡ßá ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶∂‡ßá‡¶∑!** ‚ùå\n\n‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶ï‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶ï‡ßá ‡¶¨‡¶ø‡¶∑‡ßü‡¶ü‡¶ø ‡¶ú‡¶æ‡¶®‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç ‡¶§‡¶ø‡¶®‡¶ø ‡¶ñ‡ßÅ‡¶¨ ‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á ‡¶®‡¶§‡ßÅ‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶¨‡ßá‡¶®‡•§\n\n‚è≥ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ï‡ßç‡¶∑‡¶£ ‡¶™‡¶∞ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
        "broadcast_sent": "‚úÖ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ‡¶ü‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá {count} ‡¶ú‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§",
        "broadcast_no_message": "‚ùå ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá /broadcast ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶¶‡¶ø‡¶®‡•§",
        "admin_announcement": "üì£ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶ò‡ßã‡¶∑‡¶£‡¶æ üì£",
        "back_button": "‚¨ÖÔ∏è ‡¶™‡¶ø‡¶õ‡¶®‡ßá",
        "main_menu_prompt": "‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶™‡¶∂‡¶® ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®‡•§",
    },
    'en': {
        "welcome": "üëã **Welcome, {first_name}!**\n\nChoose an option from the keyboard below.",
        "keyboard_hidden": "Keyboard hidden. Press /start to show it again.",
        "choose_service": "üî¢ Which service do you need a number for? Please choose:",
        "stats_header": "üìä **Your Statistics**",
        "strikes": "Strikes",
        "spam_count": "Spam",
        "status_banned": "Account Status: Banned for {hours} hours",
        "status_normal": "Status: Normal User",
        "stats_not_found": "Your statistics were not found. Please use the /start command.",
        "support_prompt": "üìû To contact our support team for any need, please click the button below.",
        "support_button": "Contact Support",
        "unknown_command": "ü§î Sorry, I didn't understand that command. Please use the keyboard buttons.",
        "choose_language": "Please select your language:",
        "lang_changed": "‚úÖ Your language has been successfully changed to 'English'.",
        "searching_number": "üîç Searching for a temporary **{service}** number for you...",
        "no_number_available": "‚ùå **Sorry, out of numbers right now!** ‚ùå\n\nAll our numbers are currently in use. The admin has been notified and will add new numbers soon.\n\n‚è≥ Please try again after some time.",
        "broadcast_sent": "‚úÖ Message successfully sent to {count} users.",
        "broadcast_no_message": "‚ùå Please provide a message with the /broadcast command.",
        "admin_announcement": "üì£ Admin Announcement üì£",
        "back_button": "‚¨ÖÔ∏è Back",
        "main_menu_prompt": "Choose an option from the main menu.",
    }
}

# -----------------------------------------------------------------------------
# |                      ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶ì ‡¶ì‡ßü‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™                       |
# -----------------------------------------------------------------------------
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

flask_app = Flask(__name__)
@flask_app.route('/')
def keep_alive():
    return "Bot is alive and running successfully!"

def run_flask():
    port = int(os.environ.get('PORT', 8080))
    flask_app.run(host='0.0.0.0', port=port)

# -----------------------------------------------------------------------------
# |                         ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®                          |
# -----------------------------------------------------------------------------
async def get_db_conn():
    return await psycopg.AsyncConnection.connect(DATABASE_URL)

async def setup_database(app: Application):
    logger.info("Connecting to database and verifying schema...")
    try:
        async with await get_db_conn() as aconn:
            async with aconn.cursor() as acur:
                await acur.execute("""
                    CREATE TABLE IF NOT EXISTS users (
                        user_id BIGINT PRIMARY KEY, first_name VARCHAR(255), strikes INT DEFAULT 0,
                        is_banned BOOLEAN DEFAULT FALSE, ban_until TIMESTAMP
                    );
                    CREATE TABLE IF NOT EXISTS numbers (
                        id SERIAL PRIMARY KEY, phone_number VARCHAR(25) UNIQUE NOT NULL, service VARCHAR(50) NOT NULL,
                        is_available BOOLEAN DEFAULT TRUE, is_reported BOOLEAN DEFAULT FALSE,
                        assigned_to BIGINT, assigned_at TIMESTAMP
                    );
                """)
                await acur.execute("SELECT 1 FROM information_schema.columns WHERE table_name='users' AND column_name='language'")
                if not await acur.fetchone():
                    await acur.execute("ALTER TABLE users ADD COLUMN language VARCHAR(5) DEFAULT 'bn';")
        logger.info("SUCCESS: Database schema is up-to-date.")
        await app.bot.send_message(chat_id=ADMIN_USER_ID, text="‚úÖ **Bot Deployed/Restarted Successfully!**", parse_mode='Markdown')
    except Exception as e:
        logger.error(f"CRITICAL: Database or boot failure! Error: {e}")

async def get_user_lang(user_id: int) -> str:
    async with await get_db_conn() as aconn:
        async with aconn.cursor() as acur:
            await acur.execute("SELECT language FROM users WHERE user_id = %s", (user_id,))
            result = await acur.fetchone()
            return result[0] if result and result[0] else 'bn'

async def find_available_number(service: str):
    """‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá‡•§"""
    async with await get_db_conn() as aconn:
        async with aconn.cursor(row_factory=psycopg.rows.dict_row) as acur:
            await acur.execute(
                "SELECT id, phone_number FROM numbers WHERE service ILIKE %s AND is_available = TRUE ORDER BY id LIMIT 1",
                (service,)
            )
            return await acur.fetchone()

# -----------------------------------------------------------------------------
# |                      ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶∏‡¶ï‡¶≤ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞                       |
# -----------------------------------------------------------------------------

def get_main_reply_keyboard():
    return ReplyKeyboardMarkup([[GET_NUMBER_TEXT], [MY_STATS_TEXT, SUPPORT_TEXT], [LANGUAGE_TEXT]], resize_keyboard=True)

async def get_number_options_keyboard(lang: str):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üíé Facebook", callback_data="get_number_facebook")],
        [InlineKeyboardButton("‚úàÔ∏è Telegram", callback_data="get_number_telegram")],
        [InlineKeyboardButton("üí¨ WhatsApp", callback_data="get_number_whatsapp")],
        [InlineKeyboardButton(LANG_TEXT[lang]['back_button'], callback_data="back_to_main")]
    ])

# --- ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    async with await get_db_conn() as aconn:
        async with aconn.cursor() as acur:
            await acur.execute("INSERT INTO users (user_id, first_name) VALUES (%s, %s) ON CONFLICT (user_id) DO UPDATE SET first_name = EXCLUDED.first_name", (user.id, user.first_name))
    lang = await get_user_lang(user.id)
    await update.message.reply_text(
        text=LANG_TEXT[lang]['welcome'].format(first_name=user.first_name),
        reply_markup=get_main_reply_keyboard(), parse_mode='Markdown'
    )

# --- ‡¶ï‡ßÄ‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶¨‡¶æ‡¶ü‡¶® ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ---
async def handle_get_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = await get_user_lang(update.effective_user.id)
    await update.message.reply_text(text=LANG_TEXT[lang]['choose_service'], reply_markup=await get_number_options_keyboard(lang))

async def handle_my_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang = await get_user_lang(user_id)
    async with await get_db_conn() as aconn:
        async with aconn.cursor(row_factory=psycopg.rows.dict_row) as acur:
            await acur.execute("SELECT strikes, is_banned FROM users WHERE user_id = %s", (user_id,))
            stats = await acur.fetchone()
            if stats:
                message = f"{LANG_TEXT[lang]['stats_header']}\n\n{LANG_TEXT[lang]['strikes']}: `{stats['strikes']}/{MAX_STRIKES}`\n"
                if stats['is_banned']:
                    message += f"{LANG_TEXT[lang]['spam_count']}: `{MAX_STRIKES}/{MAX_STRIKES}`\n{LANG_TEXT[lang]['status_banned'].format(hours=BAN_HOURS)}"
                else:
                    message += f"{LANG_TEXT[lang]['status_normal']}"
            else:
                message = LANG_TEXT[lang]['stats_not_found']
    await update.message.reply_text(text=message, parse_mode='Markdown')

async def handle_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = await get_user_lang(update.effective_user.id)
    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton(text=LANG_TEXT[lang]['support_button'], url=f"https://t.me/{SUPPORT_USERNAME.lstrip('@')}")]])
    await update.message.reply_text(text=LANG_TEXT[lang]['support_prompt'], reply_markup=reply_markup)

async def handle_language_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = await get_user_lang(update.effective_user.id)
    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("üáßüá© ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ", callback_data="set_lang_bn")], [InlineKeyboardButton("üá¨üáß English", callback_data="set_lang_en")]])
    await update.message.reply_text(text=LANG_TEXT[lang]['choose_language'], reply_markup=reply_markup)

# --- ‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ (‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§) ---
async def handle_button_press(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data
    lang = await get_user_lang(user_id)

    if data.startswith("get_number_"):
        service = data.split("_")[2].capitalize()
        
        # ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶è‡¶°‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ
        await query.edit_message_text(text=LANG_TEXT[lang]['searching_number'].format(service=service), parse_mode='Markdown')
        
        # ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ
        number_data = await find_available_number(service)
        
        if number_data:
            # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶≤‡ßá, ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¨‡¶∞‡¶æ‡¶¶‡ßç‡¶¶ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶≤‡¶ø‡¶ñ‡¶§‡ßá ‡¶π‡¶¨‡ßá
            # ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: await assign_number_to_user(number_data['id'], user_id)
            await query.edit_message_text(f"‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞: `{number_data['phone_number']}`", parse_mode='Markdown')
        else:
            # ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶®‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶≤‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã
            await query.edit_message_text(text=LANG_TEXT[lang]['no_number_available'], parse_mode='Markdown')
    
    elif data.startswith("set_lang_"):
        new_lang = data.split("_")[2]
        async with await get_db_conn() as aconn:
            async with aconn.cursor() as acur:
                await acur.execute("UPDATE users SET language = %s WHERE user_id = %s", (new_lang, user_id))
        await query.message.delete()
        await query.message.reply_text(LANG_TEXT[new_lang]['lang_changed'])

    elif data == "back_to_main":
        await query.message.delete()
        await query.message.reply_text(LANG_TEXT[lang]['main_menu_prompt'])

# --- ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶¨‡ßç‡¶∞‡¶°‡¶ï‡¶æ‡¶∏‡ßç‡¶ü ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ---
async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID:
        return

    lang = await get_user_lang(ADMIN_USER_ID)
    if not context.args:
        await update.message.reply_text(LANG_TEXT[lang]['broadcast_no_message'])
        return
    
    message_to_send = ' '.join(context.args)
    
    async with await get_db_conn() as aconn:
        async with aconn.cursor() as acur:
            await acur.execute("SELECT user_id, language FROM users")
            all_users = await acur.fetchall()

    sent_count = 0
    for user_id, user_lang in all_users:
        # ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶π‡ßá‡¶°‡¶æ‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø
        header = LANG_TEXT.get(user_lang, LANG_TEXT['bn'])['admin_announcement']
        formatted_message = f"> **{header}**\n>\n> {message_to_send}"
        try:
            await context.bot.send_message(chat_id=user_id, text=formatted_message, parse_mode='Markdown')
            sent_count += 1
            await asyncio.sleep(0.1) # ‡¶∏‡ßç‡¶™‡ßç‡¶Ø‡¶æ‡¶Æ‡¶ø‡¶Ç ‡¶è‡ßú‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶õ‡ßã‡¶ü ‡¶¨‡¶ø‡¶∞‡¶§‡¶ø
        except Forbidden:
            logger.warning(f"User {user_id} has blocked the bot. Skipping.")
        except Exception as e:
            logger.error(f"Failed to send message to {user_id}: {e}")
            
    await update.message.reply_text(LANG_TEXT[lang]['broadcast_sent'].format(count=sent_count))

# -----------------------------------------------------------------------------
# |                         ‡¶´‡¶æ‡¶á‡¶®‡¶æ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ                        |
# -----------------------------------------------------------------------------
def main() -> None:
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    logger.info("Keep-alive server started.")

    bot_app = Application.builder().token(BOT_TOKEN).post_init(setup_database).build()
    
    # --- ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ---
    bot_app.add_handler(CommandHandler("start", start_command))
    bot_app.add_handler(CommandHandler("broadcast", broadcast_command)) # ‡¶®‡¶§‡ßÅ‡¶® ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞

    # --- ReplyKeyboard ‡¶¨‡¶æ‡¶ü‡¶®‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø MessageHandler ---
    bot_app.add_handler(MessageHandler(filters.TEXT & filters.Regex(f'^{GET_NUMBER_TEXT}$'), handle_get_number))
    bot_app.add_handler(MessageHandler(filters.TEXT & filters.Regex(f'^{MY_STATS_TEXT}$'), handle_my_stats))
    bot_app.add_handler(MessageHandler(filters.TEXT & filters.Regex(f'^{SUPPORT_TEXT}$'), handle_support))
    bot_app.add_handler(MessageHandler(filters.TEXT & filters.Regex(f'^{LANGUAGE_TEXT}$'), handle_language_button))

    # --- ‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶ü‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø CallbackQueryHandler ---
    bot_app.add_handler(CallbackQueryHandler(handle_button_press))

    logger.info("Telegram Bot starting polling...")
    bot_app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
