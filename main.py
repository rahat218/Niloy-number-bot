import logging
import datetime
import asyncpg
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

# -----------------------------------------------------------------------------
# |                      ‚ö†Ô∏è ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶ï‡¶≤ ‡¶ó‡ßã‡¶™‡¶® ‡¶§‡¶•‡ßç‡¶Ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‚ö†Ô∏è                      |
# |      ‡¶è‡¶á ‡¶ï‡ßã‡¶° ‡¶ï‡¶æ‡¶∞‡ßã ‡¶∏‡¶æ‡¶•‡ßá ‡¶∂‡ßá‡ßü‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶≤‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶π‡ßç‡¶Ø‡¶æ‡¶ï ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§       |
# -----------------------------------------------------------------------------
BOT_TOKEN = "7925556669:AAEs8Qpj0jlRAv6FKqhIZplIQ6jlMxs4dHg"
DATABASE_URL = "postgresql://niloy_number_bot_user:p2pmOrN2Kx7WjiC611qPGk1cVBqEbfeq@dpg-d20ii8nfte5s738v6elg-a/niloy_number_bot"
ADMIN_CHANNEL_ID = -4611753759
ADMIN_USER_ID = 7052442701
SUPPORT_USERNAME = "@NgRony"

# --- ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ---
LEASE_TIME_MINUTES = 10
COOLDOWN_MINUTES = 2
MAX_STRIKES = 3
BAN_HOURS = 24

# -----------------------------------------------------------------------------
# |          ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ (Render ‡¶è‡¶∞ ‡¶Ö‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü ‡¶≤‡¶ó ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)           |
# -----------------------------------------------------------------------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
# ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶≤‡¶æ‡¶á‡¶®‡¶ü‡¶ø ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶≤‡¶æ‡¶á‡¶¨‡ßç‡¶∞‡ßá‡¶∞‡¶ø‡¶∞ ‡¶Ö‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶¨‡ßá
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# -----------------------------------------------------------------------------
# |                         ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (‡¶∏‡¶¨‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá)                       |
# -----------------------------------------------------------------------------
async def setup_database(app: Application):
    """‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶∏‡ßç‡¶¨‡ßü‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶≠‡¶æ‡¶¨‡ßá ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶ì ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶¨‡ßá"""
    logger.info("Connecting to database and creating tables if they don't exist...")
    try:
        conn = await asyncpg.connect(DATABASE_URL)
        # users ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT PRIMARY KEY, first_name VARCHAR(255), strikes INT DEFAULT 0,
                is_banned BOOLEAN DEFAULT FALSE, ban_until TIMESTAMP, last_number_request_time TIMESTAMP
            );
        """)
        # numbers ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS numbers (
                id SERIAL PRIMARY KEY, phone_number VARCHAR(25) UNIQUE NOT NULL, service VARCHAR(50) NOT NULL,
                is_available BOOLEAN DEFAULT TRUE, is_reported BOOLEAN DEFAULT FALSE,
                assigned_to BIGINT, assigned_at TIMESTAMP
            );
        """)
        await conn.close()
        logger.info("SUCCESS: Database setup complete.")
    except Exception as e:
        logger.error(f"CRITICAL: Database connection failed! Error: {e}")

# -----------------------------------------------------------------------------
# |                              ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶Æ‡ßÇ‡¶≤ ‡¶≤‡¶ú‡¶ø‡¶ï                             |
# -----------------------------------------------------------------------------

async def get_main_menu_keyboard(user_id):
    """‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡ßü‡¶æ‡¶Æ ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶®‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡¶∏‡¶π ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶Æ‡ßá‡¶®‡ßç‡¶Ø‡ßÅ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá"""
    keyboard = [
        [InlineKeyboardButton("üíé Get Facebook Number", callback_data="get_number_facebook")],
        [InlineKeyboardButton("‚úàÔ∏è Get Telegram Number", callback_data="get_number_telegram")],
        [InlineKeyboardButton("üí¨ Get WhatsApp Number", callback_data="get_number_whatsapp")],
        [
            InlineKeyboardButton("üìû Support", url=f"https://t.me/{SUPPORT_USERNAME}"),
            InlineKeyboardButton("üìä My Stats", callback_data="my_stats")
        ]
    ]
    if user_id == ADMIN_USER_ID:
        keyboard.append([InlineKeyboardButton("üëë Admin Panel üëë", callback_data="admin_panel")])
    return InlineKeyboardMarkup(keyboard)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡¶ø‡¶≤‡ßá ‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá"""
    user = update.effective_user
    logger.info(f"New user started the bot: {user.first_name} (ID: {user.id})")
    
    # ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute("INSERT INTO users (user_id, first_name) VALUES ($1, $2) ON CONFLICT (user_id) DO NOTHING", user.id, user.first_name)
    await conn.close()
    
    reply_markup = await get_main_menu_keyboard(user.id)
    await update.message.reply_photo(
        photo="https://telegra.ph/file/02194911f26a7962c454e.jpg",
        caption=f"üëã **Welcome, {user.first_name}!**\n\nChoose a service below to get a temporary number. This bot provides premium service for OTP verification.",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_get_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """'Get Number' ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡¶≤‡ßá ‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá"""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    conn = await asyncpg.connect(DATABASE_URL)
    
    # ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶° ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ
    user_data = await conn.fetchrow("SELECT * FROM users WHERE user_id = $1", user_id)
    if user_data['is_banned'] and user_data['ban_until'] and datetime.datetime.utcnow() < user_data['ban_until']:
        remaining_ban = user_data['ban_until'] - datetime.datetime.utcnow()
        await query.edit_message_caption(caption=f"‚ùå **You are Banned!**\n\nYou are temporarily blocked. Please try again after `{str(remaining_ban).split('.')[0]}`.", parse_mode='Markdown')
        await conn.close()
        return

    # ‡¶ï‡ßÅ‡¶≤‡¶°‡¶æ‡¶â‡¶® ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ
    if user_data['last_number_request_time']:
        cooldown_end_time = user_data['last_number_request_time'] + datetime.timedelta(minutes=COOLDOWN_MINUTES)
        if datetime.datetime.utcnow() < cooldown_end_time:
            remaining_time = round((cooldown_end_time - datetime.datetime.utcnow()).total_seconds())
            await query.answer(f"Please wait {remaining_time} seconds!", show_alert=True)
            await conn.close()
            return
            
    service = query.data.split("_")[2]
    
    # ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ
    async with conn.transaction():
        number_record = await conn.fetchrow("SELECT * FROM numbers WHERE service = $1 AND is_available = TRUE AND is_reported = FALSE ORDER BY RANDOM() LIMIT 1 FOR UPDATE", service)
        if number_record:
            now_utc = datetime.datetime.utcnow()
            await conn.execute("UPDATE numbers SET is_available = FALSE, assigned_to = $1, assigned_at = $2 WHERE id = $3", user_id, now_utc, number_record['id'])
            await conn.execute("UPDATE users SET last_number_request_time = $1 WHERE user_id = $2", now_utc, user_id)
            phone_number = number_record['phone_number']

            keyboard = [[InlineKeyboardButton("‚úÖ OTP Received, Release Now", callback_data=f"release_success_{number_record['id']}")],
                        [InlineKeyboardButton("‚ùå Report & Get New One", callback_data=f"release_fail_{number_record['id']}")]
                       ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_caption(
                caption=f"**Your {service.capitalize()} Number:**\n\n`{phone_number}`\n\n_This number is yours for **{LEASE_TIME_MINUTES} minutes**. Copy it and use it quickly!_",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            # ‡ßß‡ß¶ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶™‡¶∞ ‡¶Ö‡¶ü‡ßã-‡¶∞‡¶ø‡¶≤‡¶ø‡¶ú‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶æ‡¶ú ‡¶∂‡¶ø‡¶°‡¶ø‡¶â‡¶≤ ‡¶ï‡¶∞‡¶æ
            context.job_queue.run_once(auto_release_callback, LEASE_TIME_MINUTES * 60, data={'user_id': user_id, 'number_id': number_record['id'], 'number_str': phone_number}, name=f"release_{user_id}")
        else:
            await query.answer(f"Sorry, no numbers available for {service.capitalize()} right now.", show_alert=True)
    
    await conn.close()

async def handle_release_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶∞‡¶ø‡¶≤‡¶ø‡¶ú ‡¶¨‡¶æ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ö‡¶æ‡¶™‡¶≤‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá"""
    query = update.callback_query
    user_id = query.from_user.id
    
    action, status, number_id_str = query.data.split("_")
    number_id = int(number_id_str)
    
    conn = await asyncpg.connect(DATABASE_URL)
    
    if status == "success":
        await query.answer("‚úÖ Great! Releasing number...", show_alert=True)
        await conn.execute("UPDATE numbers SET is_available = TRUE, assigned_to = NULL, assigned_at = NULL WHERE id = $1", number_id)
        await conn.execute("UPDATE users SET strikes = 0 WHERE user_id = $1", user_id)
        await query.edit_message_caption(caption="‚úÖ **Number Released!**\n\nThank you for being responsible! Your previous strikes have been cleared. What's next?", reply_markup=await get_main_menu_keyboard(user_id), parse_mode='Markdown')
    
    elif status == "fail":
        await query.answer("üìù Reporting number and getting you a new one...", show_alert=True)
        # ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡¶ü‡¶ø‡¶ï‡ßá ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶â‡¶®‡ßç‡¶Æ‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ
        await conn.execute("UPDATE numbers SET is_available = TRUE, assigned_to = NULL, is_reported = TRUE WHERE id = $1", number_id)
        number_str_record = await conn.fetchrow("SELECT phone_number, service FROM numbers WHERE id = $1", number_id)
        # ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶ï‡ßá ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
        report_message = (f"üö® **Number Reported!**\n"
                        f"User: `{user_id}`\n"
                        f"Number: `{number_str_record['phone_number']}` ({number_str_record['service']})\n"
                        f"Status: Marked as 'Not Working'.")
        await context.bot.send_message(ADMIN_CHANNEL_ID, report_message, parse_mode='Markdown')
        # ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶®‡ßá‡¶ì‡ßü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶Æ‡ßá‡¶®‡ßç‡¶Ø‡ßÅ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã
        await query.edit_message_caption(caption="üìù **Number Reported!**\n\nWe've marked this number for review. You can now request a new number from the main menu without any cooldown.", reply_markup=await get_main_menu_keyboard(user_id), parse_mode='Markdown')

    await conn.close()
    
    # ‡¶Ö‡¶ü‡ßã-‡¶∞‡¶ø‡¶≤‡¶ø‡¶ú ‡¶ú‡¶¨‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ
    current_jobs = context.job_queue.get_jobs_by_name(f"release_{user_id}")
    for job in current_jobs:
        job.schedule_removal()

async def auto_release_callback(context: ContextTypes.DEFAULT_TYPE):
    """‡ßß‡ß¶ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶™‡¶∞ ‡¶∏‡ßç‡¶¨‡ßü‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶≠‡¶æ‡¶¨‡ßá ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶∞‡¶ø‡¶≤‡¶ø‡¶ú ‡¶ì ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶æ‡¶á‡¶ï ‡¶¶‡ßá‡¶ì‡ßü‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®"""
    job_data = context.job.data
    user_id, number_id, number_str = job_data['user_id'], job_data['number_id'], job_data['number_str']

    logger.warning(f"Lease expired for user {user_id} and number {number_str}. Applying strike.")
    conn = await asyncpg.connect(DATABASE_URL)
    
    # ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡¶ü‡¶ø ‡¶´‡ßá‡¶∞‡¶§ ‡¶®‡ßá‡¶ì‡ßü‡¶æ
    await conn.execute("UPDATE numbers SET is_available = TRUE, assigned_to = NULL, assigned_at = NULL WHERE id = $1", number_id)
    
    # ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶æ‡¶á‡¶ï ‡¶¶‡ßá‡¶ì‡ßü‡¶æ
    new_strikes = await conn.fetchval("UPDATE users SET strikes = strikes + 1 WHERE user_id = $1 RETURNING strikes", user_id)
    
    # ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶ï‡ßá ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ
    admin_message = (f"‚è∞ **Lease Expired & Strike Added!**\n"
                     f"User ID: `{user_id}`\n"
                     f"Number: `{number_str}`\n"
                     f"Action: Auto-released, 1 strike added. Total strikes: **{new_strikes}/{MAX_STRIKES}**.")
    await context.bot.send_message(ADMIN_CHANNEL_ID, admin_message, parse_mode='Markdown')

    # ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶¶‡¶ø ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶æ‡¶á‡¶ï ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡ßü
    if new_strikes >= MAX_STRIKES:
        ban_until = datetime.datetime.utcnow() + datetime.timedelta(hours=BAN_HOURS)
        await conn.execute("UPDATE users SET is_banned = TRUE, ban_until = $1, strikes = 0 WHERE user_id = $2", ban_until, user_id)
        await context.bot.send_message(user_id, f"‚ùå **You have been BANNED for {BAN_HOURS} hours!**\n\nYou failed to release numbers {MAX_STRIKES} times in a row. Your strikes have been reset.", parse_mode='Markdown')
        await context.bot.send_message(ADMIN_CHANNEL_ID, f"üö´ **User Banned!**\nUser ID: `{user_id}` has been automatically banned for {BAN_HOURS} hours.", parse_mode='Markdown')
    else:
        await context.bot.send_message(user_id, f"‚ö†Ô∏è **Number Lease Expired!**\n\nYour lease for `{number_str}` has ended. It has been auto-released and you have received **1 strike**.\n\nTotal Strikes: `{new_strikes}/{MAX_STRIKES}`.", parse_mode='Markdown')
        
    await conn.close()

# -----------------------------------------------------------------------------
# |                           ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ                          |
# -----------------------------------------------------------------------------
def main() -> None:
    """‡¶¨‡¶ü‡¶ü‡¶ø‡¶ï‡ßá ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶è‡¶¨‡¶Ç ‡¶ö‡¶≤‡¶Æ‡¶æ‡¶® ‡¶∞‡¶æ‡¶ñ‡ßá"""
    # post_init=setup_database ‡¶Æ‡¶æ‡¶®‡ßá ‡¶π‡¶≤‡ßã, ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá‡¶á ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá
    app = Application.builder().token(BOT_TOKEN).post_init(setup_database).build()
    
    # ‡¶ï‡ßã‡¶® ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡¶æ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßã‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá ‡¶§‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ï‡¶∞‡¶æ
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CallbackQueryHandler(handle_get_number, pattern="^get_number_"))
    app.add_handler(CallbackQueryHandler(handle_release_number, pattern="^release_"))
    # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶∞‡¶ì ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá
    
    logger.info("BOT HAS STARTED SUCCESSFULLY! Polling for updates...")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
