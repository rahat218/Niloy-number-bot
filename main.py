import logging
import datetime
import psycopg
import threading
import os
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# -----------------------------------------------------------------------------
# |                      ‚ö†Ô∏è ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶ï‡¶≤ ‡¶ó‡ßã‡¶™‡¶® ‡¶§‡¶•‡ßç‡¶Ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‚ö†Ô∏è                      |
# -----------------------------------------------------------------------------
BOT_TOKEN = "7925556669:AAE5F9zUGOK37niSd0x-YEQX8rn-xGd8Pl8" # ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
DATABASE_URL = "postgresql://niloy_number_bot_user:p2pmOrN2Kx7WjiC611qPGk1cVBqEbfeq@dpg-d20ii8nfte5s738v6elg-a/niloy_number_bot"
ADMIN_CHANNEL_ID = -4611753759
ADMIN_USER_ID = 7052442701
SUPPORT_USERNAME = "@NgRony"

# --- ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ---
LEASE_TIME_MINUTES = 10
COOLDOWN_MINUTES = 2
MAX_STRIKES = 3
BAN_HOURS = 24

# --- ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü (‡¶á‡¶Æ‡ßã‡¶ú‡¶ø ‡¶∏‡¶π) ---
GET_NUMBER_TEXT = "‚òéÔ∏è Get Number ‚òéÔ∏è"
MY_STATS_TEXT = "üìä My Stats"
SUPPORT_TEXT = "üìû Support"
ADMIN_PANEL_TEXT = "üëë Admin Panel üëë"


# -----------------------------------------------------------------------------
# |                      ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶ì ‡¶ì‡ßü‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™                       |
# -----------------------------------------------------------------------------
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

flask_app = Flask(__name__)
@flask_app.route('/')
def keep_alive():
    return "Bot is alive and running successfully!"

def run_flask():
    port = int(os.environ.get('PORT', 8080))
    flask_app.run(host='0.0.0.0', port=port)

# -----------------------------------------------------------------------------
# |                         ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®                          |
# -----------------------------------------------------------------------------
async def get_db_conn():
    return await psycopg.AsyncConnection.connect(DATABASE_URL)

async def setup_database(app: Application):
    logger.info("Connecting to database...")
    try:
        async with await get_db_conn() as aconn:
            async with aconn.cursor() as acur:
                await acur.execute("""
                    CREATE TABLE IF NOT EXISTS users (user_id BIGINT PRIMARY KEY, first_name VARCHAR(255), strikes INT DEFAULT 0, is_banned BOOLEAN DEFAULT FALSE, ban_until TIMESTAMP, last_number_request_time TIMESTAMP);
                    CREATE TABLE IF NOT EXISTS numbers (id SERIAL PRIMARY KEY, phone_number VARCHAR(25) UNIQUE NOT NULL, service VARCHAR(50) NOT NULL, is_available BOOLEAN DEFAULT TRUE, is_reported BOOLEAN DEFAULT FALSE, assigned_to BIGINT, assigned_at TIMESTAMP);
                """)
        logger.info("SUCCESS: Database setup complete.")
        await app.bot.send_message(chat_id=ADMIN_USER_ID, text="‚úÖ **Bot Deployed/Restarted Successfully!**\nEverything is online and working.", parse_mode='Markdown')
    except Exception as e:
        logger.error(f"CRITICAL: Database or boot failure! Error: {e}")

# -----------------------------------------------------------------------------
# |                      ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶∏‡¶ï‡¶≤ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞                       |
# -----------------------------------------------------------------------------

# --- ReplyKeyboardMarkup (‡¶∏‡ßç‡¶•‡¶æ‡ßü‡ßÄ ‡¶ï‡ßÄ‡¶¨‡ßã‡¶∞‡ßç‡¶°) ‡¶§‡ßà‡¶∞‡¶ø‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ---
def get_main_reply_keyboard():
    keyboard = [
        [GET_NUMBER_TEXT],
        [MY_STATS_TEXT, SUPPORT_TEXT]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, input_field_placeholder="Choose an option...")

# --- InlineKeyboardMarkup (‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø) ---
async def get_number_options_keyboard():
    keyboard = [
        [InlineKeyboardButton("üíé Facebook", callback_data="get_number_facebook")],
        [InlineKeyboardButton("‚úàÔ∏è Telegram", callback_data="get_number_telegram")],
        [InlineKeyboardButton("üí¨ WhatsApp", callback_data="get_number_whatsapp")],
        [InlineKeyboardButton("‚¨ÖÔ∏è ‡¶™‡¶ø‡¶õ‡¶®‡ßá", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def get_admin_panel_keyboard():
    keyboard = [
        [InlineKeyboardButton("‚ûï Add Number", callback_data="admin_add_number"), InlineKeyboardButton("üìä View Stats", callback_data="admin_view_stats")],
        [InlineKeyboardButton("üö´ Manage Bans", callback_data="admin_manage_bans")],
        [InlineKeyboardButton("‚¨ÖÔ∏è Back to Main Menu", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(keyboard)


# --- ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"User started: {user.first_name} ({user.id})")
    async with await get_db_conn() as aconn:
        async with aconn.cursor() as acur:
            await acur.execute("INSERT INTO users (user_id, first_name) VALUES (%s, %s) ON CONFLICT (user_id) DO UPDATE SET first_name = EXCLUDED.first_name", (user.id, user.first_name))
    
    reply_markup = get_main_reply_keyboard()
    await update.message.reply_text(
        text=f"üëã **‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ, {user.first_name}!**\n\n‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶ï‡ßÄ‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶™‡¶∂‡¶® ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®‡•§",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# --- ‡¶ï‡ßÄ‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶¨‡¶æ‡¶ü‡¶® ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ (MessageHandler ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá) ---
async def handle_get_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ 'Get Number' ‡¶¨‡¶æ‡¶ü‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá """
    reply_markup = await get_number_options_keyboard()
    await update.message.reply_text(
        text="üî¢ ‡¶ï‡ßã‡¶® ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®? ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_my_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ 'My Stats' ‡¶¨‡¶æ‡¶ü‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá """
    user_id = update.effective_user.id
    async with await get_db_conn() as aconn:
        async with aconn.cursor(row_factory=psycopg.rows.dict_row) as acur:
            await acur.execute("SELECT strikes, is_banned, ban_until FROM users WHERE user_id = %s", (user_id,))
            stats = await acur.fetchone()
            if stats:
                ban_status = "‡¶π‡ßç‡¶Ø‡¶æ‡¶Å" if stats['is_banned'] else "‡¶®‡¶æ"
                message = (
                    f"üìä **‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶®**\n\n"
                    f"‡Æ∏‡Øç‡Æü‡Øç‡Æ∞‡Øà‡Æï‡Øç: `{stats['strikes']}/{MAX_STRIKES}`\n"
                    f"‡¶®‡¶ø‡¶∑‡¶ø‡¶¶‡ßç‡¶ß: `{ban_status}`"
                )
                if stats['is_banned'] and stats['ban_until']:
                    message += f"\n‡¶®‡¶ø‡¶∑‡ßá‡¶ß‡¶æ‡¶ú‡ßç‡¶û‡¶æ ‡¶∂‡ßá‡¶∑ ‡¶π‡¶¨‡ßá: `{stats['ban_until'].strftime('%Y-%m-%d %H:%M:%S')}`"
            else:
                message = "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶® ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡¶ø‡¶®‡•§"
    await update.message.reply_text(text=message, parse_mode='Markdown')

async def handle_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ 'Support' ‡¶¨‡¶æ‡¶ü‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá """
    await update.message.reply_text(
        text=f"üìû ‡¶Ø‡ßá ‡¶ï‡ßã‡¶® ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ü‡¶ø‡¶Æ‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®: {SUPPORT_USERNAME}",
        parse_mode='Markdown'
    )

# --- ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ---
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id == ADMIN_USER_ID:
        reply_markup = await get_admin_panel_keyboard()
        await update.message.reply_text(
            text="üëë **‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ**\n\n‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶™‡¶∂‡¶® ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text("‚ùå ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ü‡¶ø ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶ø‡¶§‡•§")


# --- ‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ---
async def handle_button_press(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data
    logger.info(f"Button '{data}' pressed by user {user_id}")

    if data.startswith("get_number_"):
        service = data.split("_")[2].capitalize()
        async with await get_db_conn() as aconn:
            async with aconn.cursor(row_factory=psycopg.rows.dict_row) as acur:
                await acur.execute("SELECT is_banned FROM users WHERE user_id = %s", (user_id,))
                user_data = await acur.fetchone()
                if user_data and user_data['is_banned']:
                    await query.edit_message_text(text="‚ùå **‡¶Ü‡¶™‡¶®‡¶ø ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®‡ßá ‡¶®‡¶ø‡¶∑‡¶ø‡¶¶‡ßç‡¶ß!**", parse_mode='Markdown')
                    return
        await query.edit_message_text(
            text=f"üîç ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶∏‡ßç‡¶•‡¶æ‡ßü‡ßÄ **{service}** ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...",
            parse_mode='Markdown'
        )
        # To-Do: ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ‡¶∞ ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶π‡¶¨‡ßá‡•§

    elif data == "admin_panel": # ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶´‡ßá‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
        if user_id == ADMIN_USER_ID:
            reply_markup = await get_admin_panel_keyboard()
            await query.edit_message_text(text="üëë **‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ**", reply_markup=reply_markup, parse_mode='Markdown')

    elif data == "admin_add_number":
        await query.edit_message_text(text="‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá, ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®: `+1234567890, ServiceName`", parse_mode='Markdown')

    elif data == "admin_view_stats":
        await query.edit_message_text(text="‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ‡ßá‡¶∞ ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶® (‡¶è‡¶ñ‡¶®‡¶ì ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡ßü‡¶®‡¶ø)", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è ‡¶™‡¶ø‡¶õ‡¶®‡ßá", callback_data="admin_panel")]]))

    elif data == "back_to_main":
        await query.edit_message_text(
            text="‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶™‡¶∂‡¶® ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®‡•§",
            parse_mode='Markdown'
        )


async def handle_unknown_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"Received unknown text from user {update.effective_user.id}: '{update.message.text}'")
    await update.message.reply_text(text="ü§î ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ü‡¶ø ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡¶®‡¶ø‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶ï‡ßÄ‡¶¨‡ßã‡¶∞‡ßç‡¶°‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")


# -----------------------------------------------------------------------------
# |                         ‡¶´‡¶æ‡¶á‡¶®‡¶æ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ                        |
# -----------------------------------------------------------------------------
def main() -> None:
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    logger.info("Keep-alive server started.")

    bot_app = Application.builder().token(BOT_TOKEN).post_init(setup_database).build()
    
    # --- ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ---
    bot_app.add_handler(CommandHandler("start", start_command))
    bot_app.add_handler(CommandHandler("admin", admin_command)) # ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°

    # --- ReplyKeyboard ‡¶¨‡¶æ‡¶ü‡¶®‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø MessageHandler ---
    bot_app.add_handler(MessageHandler(filters.TEXT & filters.Regex(f'^{GET_NUMBER_TEXT}$'), handle_get_number))
    bot_app.add_handler(MessageHandler(filters.TEXT & filters.Regex(f'^{MY_STATS_TEXT}$'), handle_my_stats))
    bot_app.add_handler(MessageHandler(filters.TEXT & filters.Regex(f'^{SUPPORT_TEXT}$'), handle_support))

    # --- ‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶ü‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø CallbackQueryHandler ---
    bot_app.add_handler(CallbackQueryHandler(handle_button_press))
    
    # --- ‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ---
    bot_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_unknown_text))

    logger.info("Telegram Bot starting polling...")
    bot_app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
