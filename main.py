import logging
import datetime
import pytz
import psycopg
import psycopg.rows
import asyncio
import threading
import os
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    ConversationHandler,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from telegram.constants import ParseMode
from telegram.error import Forbidden, BadRequest, Conflict

# -----------------------------------------------------------------------------
# |                      тЪая╕П ржЖржкржирж╛рж░ рж╕ржХрж▓ ржЧрзЛржкржи рждржерзНржп ржПржЦрж╛ржирзЗ тЪая╕П                      |
# -----------------------------------------------------------------------------
# ржЖржкржирж╛рж░ ржЗржЪрзНржЫрж╛ ржЕржирзБржпрж╛рзЯрзА, рж╕ржм рждржерзНржп ржПржЦржи рж╕рж░рж╛рж╕рж░рж┐ ржХрзЛржбрзЗржЗ ржерж╛ржХржмрзЗред
BOT_TOKEN = "7925556669:AAE5F9zUGOK37niSd0x-YEQX8rn-xGd8Pl8"
DATABASE_URL = "postgresql://number_bot_running_user:kpQLHQIuZF68uc7fMlgFiaNoV7JzemyL@dpg-d21qr663jp1c73871p20-a/number_bot_running" # ржПржЦрж╛ржирзЗ ржЖржкржирж╛рж░ ржирждрзБржи ржбрж╛ржЯрж╛ржмрзЗрж╕рзЗрж░ URL ржЯрж┐ ржжрж┐ржи
ADMIN_USER_ID = 7052442701
SUPPORT_USERNAME = "@NgRony"

# --- ржмржЯрзЗрж░ рж╕рзЗржЯрж┐ржВрж╕ ---
MAX_STRIKES = 3
BAN_HOURS = 24
NUMBER_EXPIRATION_MINUTES = 5
USER_COOLDOWN_SECONDS = 120

# --- ржмрж╛ржЯржи ржЯрзЗржХрзНрж╕ржЯ ---
GET_NUMBER_TEXT = "тЬи Get Number ЁЯОЧя╕П"
MY_STATS_TEXT = "ЁЯУК My Stats"
SUPPORT_TEXT = "ЁЯУЮ Support"
LANGUAGE_TEXT = "ЁЯМР Language"
ADMIN_PANEL_TEXT = "ЁЯСС Admin Panel ЁЯСС"

# --- Conversation States ---
ADDING_NUMBERS = 1
BROADCAST_MESSAGE = 2

# --- рж╕ржорзНржкрзВрж░рзНржг ржмрж╣рзБржнрж╛рж╖рж┐ржХ ржЯрзЗржХрзНрж╕ржЯ ---
LANG_TEXT = {
    'bn': {
        "welcome": "ЁЯСЛ **рж╕рзНржмрж╛ржЧрждржо, {first_name}!**\n\nржирж┐ржЪрзЗрж░ ржХрзАржмрзЛрж░рзНржб ржерзЗржХрзЗ ржПржХржЯрж┐ ржЕржкрж╢ржи ржмрзЗржЫрзЗ ржирж┐ржиред",
        "choose_service": "ЁЯФв ржХрзЛржи рж╕рж╛рж░рзНржнрж┐рж╕рзЗрж░ ржЬржирзНржп ржиржорзНржмрж░ ржкрзНрж░рзЯрзЛржЬржи? ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржмрзЗржЫрзЗ ржирж┐ржи:",
        "stats_header": "ЁЯУК **ржЖржкржирж╛рж░ ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи**", "strikes": "рж╕рзНржЯрзНрж░рж╛ржЗржХ",
        "status_banned": "ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕: {time_left} ржкрж░ ржЖржкржирж╛рж░ ржмрзНржпрж╛ржи рж░рж┐ржорзБржн рж╣ржмрзЗред",
        "status_normal": "рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕: рж╕рж╛ржзрж╛рж░ржг ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА", "stats_not_found": "ржЖржкржирж╛рж░ ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред",
        "support_prompt": "ЁЯУЮ рж╕рж╛ржкрзЛрж░рзНржЯрзЗрж░ ржЬржирзНржп ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржиред", "support_button": "рж╕рж╛ржкрзЛрж░рзНржЯрзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи",
        "unknown_command": "ЁЯдФ ржжрзБржГржЦрж┐ржд, ржХржорж╛ржирзНржбржЯрж┐ ржмрзБржЭрждрзЗ ржкрж╛рж░рж┐ржирж┐ред", "choose_language": "ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржкржирж╛рж░ ржнрж╛рж╖рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:",
        "lang_changed": "тЬЕ ржЖржкржирж╛рж░ ржнрж╛рж╖рж╛ рж╕ржлрж▓ржнрж╛ржмрзЗ 'ржмрж╛ржВрж▓рж╛' ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред", "searching_number": "ЁЯФН ржЖржкржирж╛рж░ ржЬржирзНржп ржПржХржЯрж┐ **{service}** ржиржорзНржмрж░ ржЦрзЛржБржЬрж╛ рж╣ржЪрзНржЫрзЗ...",
        "no_number_available": "тЭМ **ржжрзБржГржЦрж┐ржд, ржПржЗ ржорзБрж╣рзВрж░рзНрждрзЗ ржиржорзНржмрж░ рж╢рзЗрж╖!** тЭМ\n\nржЕрзНржпрж╛ржбржорж┐ржи ржЦрзБржм рж╢рзАржШрзНрж░ржЗ ржирждрзБржи ржиржорзНржмрж░ ржпрзЛржЧ ржХрж░ржмрзЗржиред\nтП│ ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржХрж┐ржЫрзБржХрзНрж╖ржг ржкрж░ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
        "new_numbers_broadcast": "ЁЯОЙ **рж╕рзБржЦржмрж░! ржирждрзБржи ржиржорзНржмрж░ ржпрзЛржЧ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ!** ЁЯОЙ\n\n**рждрж╛рж░рж┐ржЦ:** {date}\n\nржПржЦржиржЗ ржЖржкржирж╛рж░ ржкрзНрж░рзЯрзЛржЬржирзАрзЯ ржиржорзНржмрж░ржЯрж┐ ржирж┐рзЯрзЗ ржирж┐ржи!",
        "admin_panel_welcome": "ЁЯСС **ржЕрзНржпрж╛ржбржорж┐ржи ржкрзНржпрж╛ржирзЗрж▓рзЗ рж╕рзНржмрж╛ржЧрждржо** ЁЯСС", "guideline_title": "ЁЯУЬ **ржЕрзНржпрж╛ржбржорж┐ржи ржЧрж╛ржЗржбрж▓рж╛ржЗржи** ЁЯУЬ",
        "guideline_text": "`тЮХ ржиржорзНржмрж░ ржпрзЛржЧ ржХрж░рзБржи`\n`/add` ржмрж╛ ржмрж╛ржЯржи ржХрзНрж▓рж┐ржХ ржХрж░рзЗ, ржкрзНрж░рждрж┐ рж▓рж╛ржЗржирзЗ ржПржХржЯрж┐ ржХрж░рзЗ ржиржорзНржмрж░ ржУ рж╕рж╛рж░рзНржнрж┐рж╕ ржХржорж╛ ржжрж┐рзЯрзЗ ржкрж╛ржарж╛ржиред\n*ржЙржжрж╛рж╣рж░ржг:* `+880...,Facebook`\n\n`ЁЯЧСя╕П ржиржорзНржмрж░ ржорзБржЫрзБржи`\n`/delnumber [ржиржорзНржмрж░]`\n\n`тЩ╗я╕П ржиржорзНржмрж░ рж░рж┐ржнрж┐ржЙ`\n`/view_reported` - рж░рж┐ржкрзЛрж░рзНржЯ рж╣ржУрзЯрж╛ ржиржорзНржмрж░ ржжрзЗржЦрзБржиред\n`/view_expired` - ржЕржмрзНржпржмрж╣рзГржд ржиржорзНржмрж░ ржжрзЗржЦрзБржиред\n`/reactivate [ржиржорзНржмрж░]` - ржиржорзНржмрж░ ржкрзБржирж░рж╛рзЯ ржмрзНржпржмрж╣рж╛рж░ржпрзЛржЧрзНржп ржХрж░рзБржиред\n\n`ЁЯУг ржШрзЛрж╖ржгрж╛ ржжрж┐ржи`\n`/broadcast` ржмрж╛ ржмрж╛ржЯржи ржХрзНрж▓рж┐ржХ ржХрж░рзБржиред\n\n`ЁЯЧСя╕П ржШрзЛрж╖ржгрж╛ ржорзБржЫрзБржи`\n`/delbroadcast` - рж╕рж░рзНржмрж╢рзЗрж╖ ржШрзЛрж╖ржгрж╛ ржорзБржЫрзБржиред\n\n`ЁЯЪл ржмрзНржпрж╛ржи/ржЖржиржмрзНржпрж╛ржи`\n`/ban [User ID]`\n`/unban [User ID]`",
        "ask_for_numbers": "тЬНя╕П ржиржорзНржмрж░ржЧрзБрж▓рзЛ ржкрж╛ржарж╛ржиред ржлрж░ржорзНржпрж╛ржЯ: `+12345,Facebook`",
        "numbers_added_success": "тЬЕ рж╕ржлрж▓ржнрж╛ржмрзЗ {count} ржЯрж┐ ржирждрзБржи ржиржорзНржмрж░ ржпрзЛржЧ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред",
        "numbers_added_fail": "тЭМ ржХрзЛржирзЛ ржмрзИржз ржиржорзНржмрж░ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред",
        "user_banned_success": "тЬЕ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА {user_id} ржХрзЗ ржмрзНржпрж╛ржи ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред",
        "user_unbanned_success": "тЬЕ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА {user_id} ржХрзЗ ржЖржиржмрзНржпрж╛ржи ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред",
        "user_not_found": "тЭМ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА {user_id} ржХрзЗ ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред",
        "broadcast_sent": "тЬЕ ржмрж╛рж░рзНрждрж╛ржЯрж┐ {count} ржЬржи ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржХрзЗ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред",
        "broadcast_no_message": "тЭМ /broadcast ржХржорж╛ржирзНржбрзЗрж░ рж╕рж╛ржерзЗ ржПржХржЯрж┐ ржмрж╛рж░рзНрждрж╛ ржжрж┐ржиред",
        "ask_broadcast_message": "ЁЯУг ржЖржкржирж╛рж░ ржШрзЛрж╖ржгрж╛рж░ ржмрж╛рж░рзНрждрж╛ржЯрж┐ ржкрж╛ржарж╛ржи:",
        "broadcast_deleted": "тЬЕ рж╕рж░рзНржмрж╢рзЗрж╖ ржШрзЛрж╖ржгрж╛ржЯрж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣рзЯрзЗржЫрзЗред",
        "admin_announcement": "ЁЯУг ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржШрзЛрж╖ржгрж╛ ЁЯУг", "back_button": "тмЕя╕П ржкрж┐ржЫржирзЗ",
        "number_message": "ржЖржкржирж╛рж░ ржиржорзНржмрж░ржЯрж┐ рж╣рж▓рзЛ: `{number}`\n\nржПржЗ ржиржорзНржмрж░ржЯрж┐ **{minutes} ржорж┐ржирж┐ржЯ** ржкрж░ ржЕржЯрзЛ рж░рж┐рж▓рж┐ржЬ рж╣рзЯрзЗ ржпрж╛ржмрзЗред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржжрзНрж░рзБржд ржХрж╛ржЬ рж╕ржорзНржкржирзНржи ржХрж░рзБржиред",
        "otp_received_button": "тЬЕ OTP ржкрзЗрзЯрзЗржЫрж┐", "otp_not_received_button": "тЭМ OTP ржЖрж╕рзЗржирж┐",
        "number_released": "тЬЕ ржзржирзНржпржмрж╛ржж! ржЖржкржирж╛рж░ ржиржорзНржмрж░ржЯрж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ рж░рж┐рж▓рж┐ржЬ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред",
        "number_reported": "тЪая╕П ржиржорзНржмрж░ржЯрж┐ рж░рж┐ржкрзЛрж░рзНржЯ ржХрж░рж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржжред ржЖржорж░рж╛ ржЖржкржирж╛ржХрзЗ ржПржХржЯрж┐ ржирждрзБржи ржиржорзНржмрж░ ржжрж┐ржЪрзНржЫрж┐ред",
        "cooldown_message": "ЁЯЪл ржЖржкржирж┐ ржЦрзБржм ржжрзНрж░рзБржд ржЕржирзБрж░рзЛржз ржХрж░ржЫрзЗржиред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ {seconds} рж╕рзЗржХрзЗржирзНржб ржкрж░ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
        "user_is_banned": "ЁЯЪл **ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржмрзНржпрж╛ржи ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред**\nржЖржкржирж┐ ржЖржорж╛ржжрзЗрж░ ржирзАрждрж┐ ржнржЩрзНржЧ ржХрж░рж╛рж░ ржХрж╛рж░ржгрзЗ ржмржЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржи ржирж╛ред\n\n**ржХрж╛рж░ржг:** рж╕рзНржкрзНржпрж╛ржорж┐ржВред\nржмрзНржпрж╛ржирзЗрж░ рж╕ржорзЯрж╕рзАржорж╛ рж╢рзЗрж╖ рж╣рж▓рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
        "strike_warning_1": "тЪая╕П **рж╕рждрж░рзНржХржмрж╛рж░рзНрждрж╛ (рж╕рзНржЯрзНрж░рж╛ржЗржХ рзз/рзй)!**\nржЖржкржирж┐ ржЖржкржирж╛рж░ ржирзЗржУрзЯрж╛ ржиржорзНржмрж░ржЯрж┐ `{number}` ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╕ржорзЯрзЗрж░ ржоржзрзНржпрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗржиржирж┐ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрж░рзЗрж░ржмрж╛рж░ рж╕рждрж░рзНржХ ржерж╛ржХржмрзЗржиред",
        "strike_warning_2": "ЁЯЪи **ржЪрзВрзЬрж╛ржирзНржд рж╕рждрж░рзНржХржмрж╛рж░рзНрждрж╛ (рж╕рзНржЯрзНрж░рж╛ржЗржХ рзи/рзй)!**\nржЖржкржирж┐ ржЖржмрж╛рж░ржУ ржПржХржЯрж┐ ржиржорзНржмрж░ ржмрзНржпржмрж╣рж╛рж░ ржирж╛ ржХрж░рзЗ ржлрзЗрж▓рзЗ рж░рзЗржЦрзЗржЫрзЗржиред ржЖрж░ ржПржХржмрж╛рж░ ржПржЗ ржнрзБрж▓ ржХрж░рж▓рзЗржЗ ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ **{ban_hours} ржШржгрзНржЯрж╛рж░ ржЬржирзНржп ржмрзНржпрж╛ржи** ржХрж░рж╛ рж╣ржмрзЗред",
        "strike_ban_message": "ЁЯЪл **ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржмрзНржпрж╛ржи!**\nржЖржкржирж┐ ржмрж╛рж░ржмрж╛рж░ рж╕рждрж░рзНржХржмрж╛рж░рзНрждрж╛ ржЙржкрзЗржХрзНрж╖рж╛ ржХрж░рзЗ ржиржорзНржмрж░ ржЕржкржЪрзЯ ржХрж░рж╛рж░ ржХрж╛рж░ржгрзЗ, ржЖржорж╛ржжрзЗрж░ рж╕рж┐рж╕рзНржЯрзЗржо ржЖржкржирж╛ржХрзЗ **{ban_hours} ржШржгрзНржЯрж╛рж░ ржЬржирзНржп ржмрзНржпрж╛ржи** ржХрж░рзЗржЫрзЗред ржПржЗ рж╕ржорзЯрзЗрж░ ржкрж░ ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ржнрж╛ржмрзЗ рж╕ржЪрж▓ рж╣рзЯрзЗ ржпрж╛ржмрзЗред",
        "number_deleted_success": "тЬЕ ржиржорзНржмрж░ `{number}` рж╕ржлрж▓ржнрж╛ржмрзЗ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣рзЯрзЗржЫрзЗред",
        "number_not_found_db": "тЭМ ржиржорзНржмрж░ `{number}` ржбрж╛ржЯрж╛ржмрзЗрж╕рзЗ ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред",
        "number_reactivated_success": "тЬЕ ржиржорзНржмрж░ `{number}` ржкрзБржирж░рж╛рзЯ ржмрзНржпржмрж╣рж╛рж░ржпрзЛржЧрзНржп ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред",
        "no_reported_numbers": "ЁЯСН ржХрзЛржирзЛ рж░рж┐ржкрзЛрж░рзНржЯ ржХрж░рж╛ ржиржорзНржмрж░ ржирзЗржЗред",
        "reported_numbers_header": "--- рж░рж┐ржкрзЛрж░рзНржЯ ржХрж░рж╛ ржиржорзНржмрж░ ---",
        "no_expired_numbers": "ЁЯСН ржХрзЛржирзЛ ржЕржмрзНржпржмрж╣рзГржд/ржорзЗрзЯрж╛ржжрзЛрждрзНрждрзАрж░рзНржг ржиржорзНржмрж░ ржирзЗржЗред",
        "expired_numbers_header": "--- ржорзЗрзЯрж╛ржжрзЛрждрзНрждрзАрж░рзНржг ржиржорзНржмрж░ ---",
    }
}
en_text = {k: v.replace('ржмрж╛ржВрж▓рж╛', 'English').replace('ржмрж╛ржВрж▓рж╛рзЯ', 'English') for k, v in LANG_TEXT['bn'].items()}
LANG_TEXT['en'] = en_text

# -----------------------------------------------------------------------------
# |                      рж▓ржЧрж┐ржВ ржУ рж╕рж╛рж░рзНржнрж╛рж░ рж╕рзЗржЯржЖржк                       |
# -----------------------------------------------------------------------------
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram.ext").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)
flask_app = Flask(__name__)
@flask_app.route('/')
def keep_alive(): return "Bot is alive!"
def run_flask(): flask_app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 8080)))

# -----------------------------------------------------------------------------
# |                         ржбрж╛ржЯрж╛ржмрзЗрж╕ ржПржмржВ ржкрзНрж░ржзрж╛ржи ржлрж╛ржВрж╢ржи                          |
# -----------------------------------------------------------------------------
async def get_db_conn(): return await psycopg.AsyncConnection.connect(DATABASE_URL)
async def setup_database(app: Application):
    logger.info("Verifying database schema...")
    try:
        async with await get_db_conn() as aconn:
            async with aconn.cursor() as acur:
                logger.info("Creating 'users' table if not exists...")
                await acur.execute("""
                    CREATE TABLE IF NOT EXISTS users (
                        user_id BIGINT PRIMARY KEY, first_name VARCHAR(255), strikes INT DEFAULT 0,
                        is_banned BOOLEAN DEFAULT FALSE, ban_until TIMESTAMP WITH TIME ZONE,
                        language VARCHAR(5) DEFAULT 'bn', last_broadcast_id BIGINT,
                        cooldown_until TIMESTAMP WITH TIME ZONE);""")
                logger.info("Creating 'numbers' table if not exists...")
                await acur.execute("""
                    CREATE TABLE IF NOT EXISTS numbers (
                        id SERIAL PRIMARY KEY, phone_number VARCHAR(25) UNIQUE NOT NULL,
                        service VARCHAR(50) NOT NULL, status VARCHAR(20) DEFAULT 'available',
                        assigned_to_id BIGINT, assigned_at TIMESTAMP WITH TIME ZONE, message_id BIGINT);""")
                logger.info("Creating index on 'numbers' table if not exists...")
                await acur.execute("CREATE INDEX IF NOT EXISTS numbers_status_service_idx ON numbers (status, service);")
        logger.info("SUCCESS: Database schema is up-to-date.")
        await app.bot.send_message(chat_id=ADMIN_USER_ID, text="тЬЕ **Bot Deployed/Restarted Successfully!**", parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"CRITICAL: Database setup failed! Error: {e}")
        os._exit(1)
async def get_user_lang(user_id: int) -> str:
    try:
        async with await get_db_conn() as aconn:
            async with aconn.cursor() as acur:
                await acur.execute("SELECT language FROM users WHERE user_id = %s", (user_id,))
                result = await acur.fetchone()
                return result[0] if result and result[0] else 'bn'
    except Exception: return 'bn'
def get_main_reply_keyboard(user_id: int):
    keyboard = [[GET_NUMBER_TEXT], [MY_STATS_TEXT, SUPPORT_TEXT, LANGUAGE_TEXT]]
    if user_id == ADMIN_USER_ID: keyboard.append([ADMIN_PANEL_TEXT])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, input_field_placeholder="Choose an option...")
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    if isinstance(context.error, Conflict):
        logger.warning("Conflict error detected. Another instance is running. Shutting down this instance.")
        os._exit(1)
    else: logger.error("Exception while handling an update:", exc_info=context.error)
async def number_expiration_job(context: ContextTypes.DEFAULT_TYPE):
    job = context.job; user_id, number, service = job.data
    lang = await get_user_lang(user_id)
    async with await get_db_conn() as aconn:
        async with aconn.cursor(row_factory=psycopg.rows.dict_row) as acur:
            await acur.execute("SELECT status, message_id FROM numbers WHERE phone_number = %s", (number,))
            number_data = await acur.fetchone()
            if number_data and number_data['status'] == 'in_use':
                await acur.execute("UPDATE numbers SET status = 'expired', assigned_to_id = NULL, assigned_at = NULL, message_id = NULL WHERE phone_number = %s", (number,))
                await acur.execute("UPDATE users SET strikes = strikes + 1 WHERE user_id = %s RETURNING strikes", (user_id,))
                new_strikes = (await acur.fetchone())['strikes']
                try: await context.bot.edit_message_text("тМЫя╕П ржПржЗ ржиржорзНржмрж░рзЗрж░ ржорзЗрзЯрж╛ржж рж╢рзЗрж╖ред", chat_id=user_id, message_id=number_data['message_id'])
                except (BadRequest, Forbidden): pass
                if new_strikes >= MAX_STRIKES:
                    ban_until = datetime.datetime.now(pytz.utc) + datetime.timedelta(hours=BAN_HOURS)
                    await acur.execute("UPDATE users SET is_banned = TRUE, ban_until = %s WHERE user_id = %s", (ban_until, user_id))
                    await context.bot.send_message(user_id, LANG_TEXT[lang]['strike_ban_message'].format(ban_hours=BAN_HOURS))
                elif new_strikes == 2: await context.bot.send_message(user_id, LANG_TEXT[lang]['strike_warning_2'].format(ban_hours=BAN_HOURS))
                elif new_strikes == 1: await context.bot.send_message(user_id, LANG_TEXT[lang]['strike_warning_1'].format(number=number))
async def daily_cleanup_job(context: ContextTypes.DEFAULT_TYPE):
    logger.info("Running daily cleanup and unban job...")
    try:
        async with await get_db_conn() as aconn:
            async with aconn.cursor(row_factory=psycopg.rows.dict_row) as acur:
                await acur.execute("UPDATE users SET is_banned = FALSE, ban_until = NULL, strikes = 0 WHERE is_banned = TRUE AND ban_until < NOW() RETURNING user_id")
                unbanned_users = await acur.fetchall()
                for user in unbanned_users:
                    logger.info(f"Auto-unbanned user: {user['user_id']}")
                    try: await context.bot.send_message(user['user_id'], "тЬЕ ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗрж░ ржмрзНржпрж╛ржи рждрзБрж▓рзЗ ржирзЗржУрзЯрж╛ рж╣рзЯрзЗржЫрзЗред ржЖржкржирж┐ ржПржЦржи ржмржЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред")
                    except (Forbidden, BadRequest): logger.warning(f"Could not notify unbanned user {user['user_id']}.")
    except Exception as e: logger.error(f"Daily cleanup job failed: {e}")
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    async with await get_db_conn() as aconn:
        async with aconn.cursor() as acur: await acur.execute("INSERT INTO users (user_id, first_name) VALUES (%s, %s) ON CONFLICT (user_id) DO UPDATE SET first_name = EXCLUDED.first_name", (user.id, user.first_name))
    lang = await get_user_lang(user.id)
    await update.message.reply_text(text=LANG_TEXT[lang]['welcome'].format(first_name=user.first_name), reply_markup=get_main_reply_keyboard(user.id), parse_mode=ParseMode.MARKDOWN)
async def check_user_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    user_id = update.effective_user.id; lang = await get_user_lang(user_id)
    async with await get_db_conn() as aconn:
        async with aconn.cursor(row_factory=psycopg.rows.dict_row) as acur:
            await acur.execute("SELECT is_banned, ban_until, cooldown_until FROM users WHERE user_id = %s", (user_id,))
            user_data = await acur.fetchone()
            if user_data:
                effective_message = update.callback_query.message if update.callback_query else update.message
                if user_data['is_banned']: await effective_message.reply_text(LANG_TEXT[lang]['user_is_banned']); return False
                if user_data['cooldown_until'] and user_data['cooldown_until'] > datetime.datetime.now(pytz.utc):
                    seconds_left = int((user_data['cooldown_until'] - datetime.datetime.now(pytz.utc)).total_seconds())
                    await effective_message.reply_text(LANG_TEXT[lang]['cooldown_message'].format(seconds=seconds_left)); return False
    return True
async def handle_get_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_user_status(update, context): return
    lang = await get_user_lang(update.effective_user.id)
    keyboard = [[InlineKeyboardButton(s, callback_data=f"get_number_{s.lower()}") for s in ["Facebook", "Telegram", "WhatsApp"]]]
    await update.message.reply_text(LANG_TEXT[lang]['choose_service'], reply_markup=InlineKeyboardMarkup(keyboard))
async def handle_my_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id; lang = await get_user_lang(user_id)
    async with await get_db_conn() as aconn:
        async with aconn.cursor(row_factory=psycopg.rows.dict_row) as acur:
            await acur.execute("SELECT strikes, is_banned, ban_until FROM users WHERE user_id = %s", (user_id,))
            stats = await acur.fetchone()
            if stats:
                message = f"**{LANG_TEXT[lang]['stats_header']}**\n\n{LANG_TEXT[lang]['strikes']}: `{stats['strikes']}/{MAX_STRIKES}`\n"
                if stats['is_banned']:
                    time_left = (stats['ban_until'] - datetime.datetime.now(pytz.utc)); hours, remainder = divmod(time_left.total_seconds(), 3600); minutes, _ = divmod(remainder, 60)
                    time_left_str = f"{int(hours)}h {int(minutes)}m"
                    message += f"{LANG_TEXT[lang]['status_banned'].format(time_left=time_left_str)}"
                else: message += f"{LANG_TEXT[lang]['status_normal']}"
            else: message = LANG_TEXT[lang]['stats_not_found']
    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
async def handle_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = await get_user_lang(update.effective_user.id)
    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton(text=LANG_TEXT[lang]['support_button'], url=f"https://t.me/{SUPPORT_USERNAME.lstrip('@')}")]])
    await update.message.reply_text(LANG_TEXT[lang]['support_prompt'], reply_markup=reply_markup)
async def handle_language_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = await get_user_lang(update.effective_user.id)
    keyboard = [[InlineKeyboardButton("ЁЯЗзЁЯЗй ржмрж╛ржВрж▓рж╛", callback_data="set_lang_bn"), InlineKeyboardButton("ЁЯЗмЁЯЗз English", callback_data="set_lang_en")]]
    await update.message.reply_text(LANG_TEXT[lang]['choose_language'], reply_markup=InlineKeyboardMarkup(keyboard))
async def handle_button_press(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    user = query.from_user; data = query.data; lang = await get_user_lang(user.id)
    if data.startswith("set_lang_"):
        new_lang = data.split("_")[-1]
        async with await get_db_conn() as aconn:
            async with aconn.cursor() as acur: await acur.execute("UPDATE users SET language = %s WHERE user_id = %s", (new_lang, user.id))
        await query.edit_message_text(LANG_TEXT[new_lang]['lang_changed']); return
    if not await check_user_status(update, context):
        try: await query.message.delete()
        except: pass
        return
    if data.startswith("get_number_"):
        service = data.split("_")[-1].capitalize()
        await query.edit_message_text(text=LANG_TEXT[lang]['searching_number'].format(service=service), parse_mode=ParseMode.MARKDOWN)
        async with await get_db_conn() as aconn:
            async with aconn.cursor(row_factory=psycopg.rows.dict_row) as acur:
                await acur.execute("UPDATE numbers SET status = 'in_use', assigned_to_id = %s, assigned_at = NOW() WHERE id = (SELECT id FROM numbers WHERE service ILIKE %s AND status = 'available' ORDER BY random() LIMIT 1) RETURNING phone_number, id", (user.id, service))
                number_data = await acur.fetchone()
        if number_data:
            number = number_data['phone_number']
            keyboard = [[InlineKeyboardButton(LANG_TEXT[lang]['otp_received_button'], callback_data=f"release_{number}"), InlineKeyboardButton(LANG_TEXT[lang]['otp_not_received_button'], callback_data=f"report_{number}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            sent_message = await query.edit_message_text(text=LANG_TEXT[lang]['number_message'].format(number=number, minutes=NUMBER_EXPIRATION_MINUTES), reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            async with await get_db_conn() as aconn:
                async with aconn.cursor() as acur: await acur.execute("UPDATE numbers SET message_id = %s WHERE phone_number = %s", (sent_message.message_id, number))
            context.job_queue.run_once(number_expiration_job, datetime.timedelta(minutes=NUMBER_EXPIRATION_MINUTES), data=[user.id, number, service], name=f"exp_{user.id}_{number}")
        else: await query.edit_message_text(text=LANG_TEXT[lang]['no_number_available'], parse_mode=ParseMode.MARKDOWN)
    elif data.startswith("release_"):
        number = data.split("_")[1]
        async with await get_db_conn() as aconn:
            async with aconn.cursor() as acur:
                await acur.execute("UPDATE numbers SET status = 'available', assigned_to_id = NULL, assigned_at = NULL, message_id = NULL WHERE phone_number = %s AND assigned_to_id = %s", (number, user.id))
                cooldown_time = datetime.datetime.now(pytz.utc) + datetime.timedelta(seconds=USER_COOLDOWN_SECONDS)
                await acur.execute("UPDATE users SET cooldown_until = %s WHERE user_id = %s", (cooldown_time, user.id))
        await query.edit_message_text(text=LANG_TEXT[lang]['number_released'])
        jobs = context.job_queue.get_jobs_by_name(f"exp_{user.id}_{number}"); [job.schedule_removal() for job in jobs]
    elif data.startswith("report_"):
        number = data.split("_")[1]
        await query.edit_message_text(text=LANG_TEXT[lang]['number_reported'])
        async with await get_db_conn() as aconn:
            async with aconn.cursor() as acur: await acur.execute("UPDATE numbers SET status = 'reported', assigned_to_id = NULL, assigned_at = NULL, message_id = NULL WHERE phone_number = %s AND assigned_to_id = %s", (number, user.id))
        jobs = context.job_queue.get_jobs_by_name(f"exp_{user.id}_{number}"); [job.schedule_removal() for job in jobs]
        await handle_get_number(update, context)
async def admin_panel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID: return
    lang = await get_user_lang(ADMIN_USER_ID)
    keyboard = [[InlineKeyboardButton("тЮХ ржиржорзНржмрж░ ржпрзЛржЧ ржХрж░рзБржи", callback_data="admin_add_numbers"), InlineKeyboardButton("ЁЯУг ржШрзЛрж╖ржгрж╛ ржжрж┐ржи", callback_data="admin_broadcast")], [InlineKeyboardButton("ЁЯУЬ ржЧрж╛ржЗржбрж▓рж╛ржЗржи ржжрзЗржЦрзБржи", callback_data="admin_guideline")]]
    await update.message.reply_text(LANG_TEXT[lang]['admin_panel_welcome'], reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN)
async def admin_panel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    if query.from_user.id != ADMIN_USER_ID: return
    lang = await get_user_lang(ADMIN_USER_ID)
    if query.data == "admin_add_numbers": await query.message.reply_text(LANG_TEXT[lang]['ask_for_numbers']); return ADDING_NUMBERS
    elif query.data == "admin_broadcast": await query.message.reply_text(LANG_TEXT[lang]['ask_broadcast_message']); return BROADCAST_MESSAGE
    elif query.data == "admin_guideline": await query.message.reply_text(f"**{LANG_TEXT[lang]['guideline_title']}**\n\n{LANG_TEXT[lang]['guideline_text']}", parse_mode=ParseMode.MARKDOWN)
    return ConversationHandler.END
async def handle_add_numbers_convo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = await get_user_lang(ADMIN_USER_ID)
    lines = update.message.text.strip().split('\n')
    valid_numbers = [(p[0].strip(), p[1].strip().capitalize()) for line in lines if len(p := line.split(',')) == 2 and p[0].strip().startswith('+')]
    if not valid_numbers: await update.message.reply_text(LANG_TEXT[lang]['numbers_added_fail']); return ConversationHandler.END
    async with await get_db_conn() as aconn:
        async with aconn.cursor() as acur:
            await acur.executemany("INSERT INTO numbers (phone_number, service) VALUES (%s, %s) ON CONFLICT (phone_number) DO NOTHING", valid_numbers)
            count = acur.rowcount
    await update.message.reply_text(LANG_TEXT[lang]['numbers_added_success'].format(count=count))
    if count > 0: context.application.create_task(broadcast_message(context, LANG_TEXT['bn']['new_numbers_broadcast'].format(date=datetime.datetime.now().strftime("%d %B, %Y"))))
    return ConversationHandler.END
async def handle_broadcast_convo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = await get_user_lang(ADMIN_USER_ID)
    message_to_broadcast = f"**{LANG_TEXT[lang]['admin_announcement']}**\n\n{update.message.text}"
    context.application.create_task(broadcast_message(context, message_to_broadcast))
    return ConversationHandler.END
async def broadcast_message(context: ContextTypes.DEFAULT_TYPE, message_text: str):
    lang = await get_user_lang(ADMIN_USER_ID)
    async with await get_db_conn() as aconn:
        async with aconn.cursor(row_factory=psycopg.rows.dict_row) as acur:
            await acur.execute("SELECT user_id, last_broadcast_id FROM users")
            all_users = await acur.fetchall()
    sent_count = 0
    for user_data in all_users:
        user_id = user_data['user_id']
        try:
            sent_message = await context.bot.send_message(chat_id=user_id, text=message_text, parse_mode=ParseMode.MARKDOWN)
            async with aconn.cursor() as acur_update:
                await acur_update.execute("UPDATE users SET last_broadcast_id = %s WHERE user_id = %s", (sent_message.message_id, user_id))
            sent_count += 1
        except Forbidden: logger.warning(f"User {user_id} blocked the bot.")
        except Exception as e: logger.error(f"Failed broadcast to {user_id}: {e}")
        await asyncio.sleep(0.05)
    await context.bot.send_message(ADMIN_USER_ID, LANG_TEXT[lang]['broadcast_sent'].format(count=sent_count))
async def delete_last_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID: return
    lang = await get_user_lang(ADMIN_USER_ID)
    await update.message.reply_text("ЁЯЧСя╕П рж╕рж░рзНржмрж╢рзЗрж╖ ржШрзЛрж╖ржгрж╛ржЯрж┐ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржЪрзНржЫрзЗ...")
    async with await get_db_conn() as aconn:
        async with aconn.cursor(row_factory=psycopg.rows.dict_row) as acur:
            await acur.execute("SELECT user_id, last_broadcast_id FROM users WHERE last_broadcast_id IS NOT NULL")
            users_with_broadcast = await acur.fetchall()
    for user in users_with_broadcast:
        try: await context.bot.delete_message(chat_id=user['user_id'], message_id=user['last_broadcast_id'])
        except (BadRequest, Forbidden): pass
        await asyncio.sleep(0.05)
    async with aconn.cursor() as acur: await acur.execute("UPDATE users SET last_broadcast_id = NULL")
    await update.message.reply_text(LANG_TEXT[lang]['broadcast_deleted'])
async def ban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID: return
    lang = await get_user_lang(ADMIN_USER_ID)
    try:
        user_to_ban = int(context.args[0])
        ban_time = datetime.datetime.now(pytz.utc) + datetime.timedelta(hours=BAN_HOURS)
        async with await get_db_conn() as aconn:
            async with aconn.cursor() as acur:
                await acur.execute("UPDATE users SET is_banned = TRUE, ban_until = %s, strikes = %s WHERE user_id = %s", (ban_time, MAX_STRIKES, user_to_ban))
                msg = LANG_TEXT[lang]['user_banned_success'].format(user_id=user_to_ban) if acur.rowcount > 0 else LANG_TEXT[lang]['user_not_found'].format(user_id=user_to_ban)
        await update.message.reply_text(msg)
    except (IndexError, ValueError): await update.message.reply_text("ржмрзНржпржмрж╣рж╛рж░: /ban [User ID]")
async def unban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID: return
    lang = await get_user_lang(ADMIN_USER_ID)
    try:
        user_to_unban = int(context.args[0])
        async with await get_db_conn() as aconn:
            async with aconn.cursor() as acur:
                await acur.execute("UPDATE users SET is_banned = FALSE, ban_until = NULL, strikes = 0 WHERE user_id = %s", (user_to_unban,))
                msg = LANG_TEXT[lang]['user_unbanned_success'].format(user_id=user_to_unban) if acur.rowcount > 0 else LANG_TEXT[lang]['user_not_found'].format(user_id=user_to_unban)
        await update.message.reply_text(msg)
    except (IndexError, ValueError): await update.message.reply_text("ржмрзНржпржмрж╣рж╛рж░: /unban [User ID]")
async def delnumber_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID: return
    lang = await get_user_lang(ADMIN_USER_ID)
    try:
        number_to_delete = context.args[0].strip()
        async with await get_db_conn() as aconn:
            async with aconn.cursor() as acur:
                await acur.execute("DELETE FROM numbers WHERE phone_number = %s", (number_to_delete,))
                if acur.rowcount > 0: await update.message.reply_text(LANG_TEXT[lang]['number_deleted_success'].format(number=number_to_delete))
                else: await update.message.reply_text(LANG_TEXT[lang]['number_not_found_db'].format(number=number_to_delete))
    except IndexError: await update.message.reply_text("ржмрзНржпржмрж╣рж╛рж░: /delnumber [+123456...]")
async def reactivate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID: return
    lang = await get_user_lang(ADMIN_USER_ID)
    try:
        number_to_reactivate = context.args[0].strip()
        async with await get_db_conn() as aconn:
            async with aconn.cursor() as acur:
                await acur.execute("UPDATE numbers SET status = 'available', assigned_to_id = NULL WHERE phone_number = %s", (number_to_reactivate,))
                if acur.rowcount > 0: await update.message.reply_text(LANG_TEXT[lang]['number_reactivated_success'].format(number=number_to_reactivate))
                else: await update.message.reply_text(LANG_TEXT[lang]['number_not_found_db'].format(number=number_to_reactivate))
    except IndexError: await update.message.reply_text("ржмрзНржпржмрж╣рж╛рж░: /reactivate [+123456...]")
async def view_numbers_by_status(update: Update, context: ContextTypes.DEFAULT_TYPE, status: str):
    if update.effective_user.id != ADMIN_USER_ID: return
    lang = await get_user_lang(ADMIN_USER_ID)
    header = LANG_TEXT[lang][f'{status}_numbers_header']; no_numbers_msg = LANG_TEXT[lang][f'no_{status}_numbers']
    async with await get_db_conn() as aconn:
        async with aconn.cursor(row_factory=psycopg.rows.dict_row) as acur:
            await acur.execute("SELECT phone_number, service FROM numbers WHERE status = %s", (status,))
            numbers = await acur.fetchall()
    if not numbers: await update.message.reply_text(no_numbers_msg); return
    message = f"**{header}**\n\n"
    for num in numbers:
        message += f"`{num['phone_number']}` - *{num['service']}*\n"
    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
def main() -> None:
    threading.Thread(target=run_flask, daemon=True).start()
    bot_app = Application.builder().token(BOT_TOKEN).post_init(setup_database).build()
    job_queue = bot_app.job_queue
    job_queue.run_daily(daily_cleanup_job, time=datetime.time(hour=0, minute=5, tzinfo=pytz.UTC))
    bot_app.add_error_handler(error_handler)
    admin_conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(admin_panel_callback, pattern='^admin_add_numbers$'),
            CommandHandler("add", lambda u,c: admin_panel_callback(u.callback_query,c)),
            CallbackQueryHandler(admin_panel_callback, pattern='^admin_broadcast$'),
            CommandHandler("broadcast", lambda u,c: admin_panel_callback(u.callback_query,c))
        ],
        states={ADDING_NUMBERS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_add_numbers_convo)],
                BROADCAST_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_broadcast_convo)],},
        fallbacks=[CommandHandler("start", start_command)], per_message=False,
    )
    bot_app.add_handler(admin_conv_handler)
    bot_app.add_handler(CommandHandler("start", start_command))
    bot_app.add_handler(CommandHandler("ban", ban_command)); bot_app.add_handler(CommandHandler("unban", unban_command))
    bot_app.add_handler(CommandHandler("delnumber", delnumber_command)); bot_app.add_handler(CommandHandler("delbroadcast", delete_last_broadcast))
    bot_app.add_handler(CommandHandler("reactivate", reactivate_command))
    bot_app.add_handler(CommandHandler("view_reported", lambda u, c: view_numbers_by_status(u, c, 'reported')))
    bot_app.add_handler(CommandHandler("view_expired", lambda u, c: view_numbers_by_status(u, c, 'expired')))
    bot_app.add_handler(MessageHandler(filters.TEXT & filters.Regex(f'^{GET_NUMBER_TEXT}$'), handle_get_number))
    bot_app.add_handler(MessageHandler(filters.TEXT & filters.Regex(f'^{MY_STATS_TEXT}$'), handle_my_stats))
    bot_app.add_handler(MessageHandler(filters.TEXT & filters.Regex(f'^{SUPPORT_TEXT}$'), handle_support))
    bot_app.add_handler(MessageHandler(filters.TEXT & filters.Regex(f'^{LANGUAGE_TEXT}$'), handle_language_button))
    bot_app.add_handler(MessageHandler(filters.TEXT & filters.Regex(f'^{ADMIN_PANEL_TEXT}$'), admin_panel_command))
    bot_app.add_handler(CallbackQueryHandler(admin_panel_callback, pattern='^admin_guideline$'))
    bot_app.add_handler(CallbackQueryHandler(handle_button_press))
    bot_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, start_command))
    logger.info("Telegram Bot starting polling...")
    bot_app.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)
if __name__ == "__main__":
    main()
