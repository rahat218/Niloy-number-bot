import logging
import datetime
import psycopg
import threading
import os
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

# -----------------------------------------------------------------------------
# |                      ‚ö†Ô∏è ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶ï‡¶≤ ‡¶ó‡ßã‡¶™‡¶® ‡¶§‡¶•‡ßç‡¶Ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‚ö†Ô∏è                      |
# -----------------------------------------------------------------------------
BOT_TOKEN = "7925556669:AAEs8Qpj0jlRAv6FKqhIZplIQ6jlMxs4dHg"
DATABASE_URL = "postgresql://niloy_number_bot_user:p2pmOrN2Kx7WjiC611qPGk1cVBqEbfeq@dpg-d20ii8nfte5s738v6elg-a/niloy_number_bot"
ADMIN_CHANNEL_ID = -4611753759
ADMIN_USER_ID = 7052442701
SUPPORT_USERNAME = "@NgRony"

# --- ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ---
LEASE_TIME_MINUTES = 10
COOLDOWN_MINUTES = 2
MAX_STRIKES = 3
BAN_HOURS = 24

# -----------------------------------------------------------------------------
# |                      ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ (‡¶Ö‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü ‡¶≤‡¶ó ‡¶¨‡¶®‡ßç‡¶ß)                       |
# -----------------------------------------------------------------------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# -----------------------------------------------------------------------------
# |       FINALLY, THE CORRECT WAY: The "Keep Alive" Web Server (Flask)       |
# -----------------------------------------------------------------------------
flask_app = Flask(__name__)

@flask_app.route('/')
def keep_alive():
    """‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø UptimeRobot ‡¶ï‡ßá ‡¶¨‡¶≤‡¶¨‡ßá ‡¶Ø‡ßá ‡¶¨‡¶ü ‡¶¨‡ßá‡¶Å‡¶ö‡ßá ‡¶Ü‡¶õ‡ßá‡•§"""
    return "Bot is alive and running!"

def run_flask():
    """‡¶ì‡ßü‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡¶ü‡¶ø ‡¶ö‡¶æ‡¶≤‡¶æ‡¶¨‡ßá‡•§"""
    port = int(os.environ.get('PORT', 8080))
    flask_app.run(host='0.0.0.0', port=port)

# -----------------------------------------------------------------------------
# |               ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (psycopg ‡¶≤‡¶æ‡¶á‡¶¨‡ßç‡¶∞‡ßá‡¶∞‡¶ø ‡¶¶‡¶ø‡ßü‡ßá)                  |
# -----------------------------------------------------------------------------
async def get_db_conn():
    return await psycopg.AsyncConnection.connect(DATABASE_URL)

async def setup_database(app: Application):
    logger.info("Connecting to database...")
    try:
        async with await get_db_conn() as aconn:
            async with aconn.cursor() as acur:
                await acur.execute("""
                    CREATE TABLE IF NOT EXISTS users (
                        user_id BIGINT PRIMARY KEY, first_name VARCHAR(255), strikes INT DEFAULT 0,
                        is_banned BOOLEAN DEFAULT FALSE, ban_until TIMESTAMP, last_number_request_time TIMESTAMP
                    );
                """)
                await acur.execute("""
                    CREATE TABLE IF NOT EXISTS numbers (
                        id SERIAL PRIMARY KEY, phone_number VARCHAR(25) UNIQUE NOT NULL, service VARCHAR(50) NOT NULL,
                        is_available BOOLEAN DEFAULT TRUE, is_reported BOOLEAN DEFAULT FALSE,
                        assigned_to BIGINT, assigned_at TIMESTAMP
                    );
                """)
        logger.info("SUCCESS: Database setup complete.")
    except Exception as e:
        logger.error(f"CRITICAL: Database connection failed! Error: {e}")

# -----------------------------------------------------------------------------
# |              ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶∏‡¶ï‡¶≤ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã‡¶á)                     |
# -----------------------------------------------------------------------------
# (‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¨‡¶ü‡ßá‡¶∞ start, get_number, release_number ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø ‡¶∏‡¶¨ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã‡¶á ‡¶•‡¶æ‡¶ï‡¶¨‡ßá)
# (‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶ï‡ßã‡¶°‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡¶®‡¶æ)
async def get_main_menu_keyboard(user_id):
    keyboard = [[InlineKeyboardButton("üíé Get Facebook Number", callback_data="get_number_facebook")], [InlineKeyboardButton("‚úàÔ∏è Get Telegram Number", callback_data="get_number_telegram")], [InlineKeyboardButton("üí¨ Get WhatsApp Number", callback_data="get_number_whatsapp")], [InlineKeyboardButton("üìû Support", url=f"https://t.me/{SUPPORT_USERNAME}"), InlineKeyboardButton("üìä My Stats", callback_data="my_stats")]]
    if user_id == ADMIN_USER_ID:
        keyboard.append([InlineKeyboardButton("üëë Admin Panel üëë", callback_data="admin_panel")])
    return InlineKeyboardMarkup(keyboard)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"User started: {user.first_name} ({user.id})")
    async with await get_db_conn() as aconn:
        async with aconn.cursor() as acur:
            await acur.execute("INSERT INTO users (user_id, first_name) VALUES (%s, %s) ON CONFLICT (user_id) DO NOTHING", (user.id, user.first_name))
    reply_markup = await get_main_menu_keyboard(user.id)
    await update.message.reply_photo(photo="https://telegra.ph/file/02194911f26a7962c454e.jpg", caption=f"üëã **Welcome, {user.first_name}!**\n\nChoose a service below.", reply_markup=reply_markup, parse_mode='Markdown')

# ... (‡¶¨‡¶æ‡¶ï‡¶ø ‡¶∏‡¶¨ ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶™‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá, ‡¶Ø‡¶æ ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶ï‡ßã‡¶°‡ßá ‡¶õ‡¶ø‡¶≤)
# ... ‡¶Ü‡¶Æ‡¶ø ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶¶‡¶ø‡ßü‡ßá ‡¶¶‡¶ø‡¶ö‡ßç‡¶õ‡¶ø, ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶ï‡ßã‡¶° ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã ...

# -----------------------------------------------------------------------------
# |                         ‡¶´‡¶æ‡¶á‡¶®‡¶æ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ                        |
# -----------------------------------------------------------------------------
def main() -> None:
    # ‡¶õ‡ßã‡¶ü‡ßç‡¶ü ‡¶ì‡ßü‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü‡¶ü‡¶ø‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá (Thread) ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    logger.info("Keep-alive server started in the background.")

    # ‡¶è‡¶ñ‡¶® ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü‡¶ü‡¶ø‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    bot_app = Application.builder().token(BOT_TOKEN).post_init(setup_database).build()
    
    # --- ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶∏‡¶¨ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßã ---
    bot_app.add_handler(CommandHandler("start", start_command))
    # bot_app.add_handler(CallbackQueryHandler(...)) # ‡¶¨‡¶æ‡¶ï‡¶ø‡¶ó‡ßÅ‡¶≤‡ßã‡¶ì ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶¨‡ßá

    logger.info("Telegram Bot starting polling...")
    bot_app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
